var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.245,1,2.012]],["body/controllers/AppController.html",[0,2.012,1,2.606,2,1.262,3,0.254,4,0.216,5,0.216,6,2.426,7,0.424,8,3.387,9,0.378,10,1.36,11,1.965,12,4.066,13,4.443,14,5.333,15,2.912,16,2.029,17,0.034,18,2.912,19,1.896,20,1.197,21,2.912,22,4.066,23,1.11,24,2.912,25,4.684,26,1.567,27,0.758,28,1.567,29,5.876,30,1.567,31,2.912,32,3.708,33,2.912,34,0.024,35,2.912,36,2.912,37,2.426,38,2.34,39,3.387,40,3.387,41,2.912,42,0.471,43,2.912,44,2.912,45,4.066,46,4.684,47,4.684,48,2.912,49,0.505,50,4.066,51,1.867,52,1.867,53,2.606,54,0.521,55,2.426,56,1.517,57,1.928,58,2.912,59,1.381,60,2.426,61,1.867,62,2.912,63,1.867,64,1.867,65,2.606,66,1.156,67,2.912,68,1.706,69,2.106,70,1.262,71,1.262,72,2.912,73,0.254,74,0.144,75,1.061,76,1.517,77,2.912,78,1.695,79,2.912,80,2.912,81,4.684,82,1.867,83,2.912,84,2.106,85,4.066,86,2.912,87,2.912,88,2.912,89,2.912,90,1.867,91,2.912,92,2.912,93,1.156,94,2.426,95,2.912,96,0.021,97,0.015]],["title/modules/AppModule.html",[98,1.049,99,2.012]],["body/modules/AppModule.html",[1,3.395,2,2.073,3,0.324,4,0.275,5,0.275,17,0.034,34,0.019,49,0.533,54,0.665,73,0.324,74,0.184,96,0.025,97,0.019,98,1.771,99,4.042,100,1.608,101,1.608,102,1.933,103,1.933,104,1.608,105,2.492,106,1.933,107,3.092,108,3.092,109,3.411,110,3.411,111,3.411,112,2.568,113,2.492,114,1.933,115,1.933,116,2.684,117,3.395,118,2.754,119,3.712,120,2.684,121,3.712,122,3.712,123,2.379,124,1.608,125,3.712,126,3.712,127,2.684,128,3.46,129,3.092,130,3.092,131,3.712]],["title/modules/AuthModule.html",[98,1.049,109,1.806]],["body/modules/AuthModule.html",[3,0.323,4,0.274,5,0.274,17,0.034,34,0.019,49,0.526,54,0.662,56,1.925,57,2.987,73,0.323,74,0.183,96,0.025,97,0.019,98,1.767,100,1.601,101,1.601,102,1.925,103,1.925,104,1.601,105,2.753,106,2.753,109,3.644,112,2.565,113,2.485,114,1.925,115,1.925,118,2.746,132,3.079,133,3.696,134,3.079,135,3.079,136,3.407,137,3.407,138,3.696,139,3.079,140,3.696,141,4.772,142,3.696,143,3.696,144,2.672,145,3.696,146,3.696,147,3.696,148,3.079,149,3.079,150,3.696,151,3.696,152,3.696,153,3.696]],["title/injectables/AuthService.html",[57,1.488,154,0.619]],["body/injectables/AuthService.html",[3,0.278,4,0.236,5,0.236,7,0.63,9,0.414,10,1.447,11,1.899,13,4.388,17,0.034,19,1.762,20,1.23,23,1.025,26,1.447,27,0.7,28,1.447,30,1.642,34,0.025,37,2.655,38,1.834,39,2.655,40,2.655,42,0.7,49,0.429,54,0.571,57,2.051,68,1.788,69,2.305,73,0.278,74,0.158,75,1.575,76,1.66,78,1.642,93,1.717,96,0.022,97,0.016,144,2.305,154,0.853,155,1.265,156,2.655,157,4.326,158,2.773,159,4.326,160,4.326,161,3.187,162,4.911,163,4.326,164,1.229,165,5.68,166,3.187,167,2.773,168,1.842,169,2.489,170,4.911,171,2.186,172,2.655,173,3.187,174,1.834,175,3.187,176,2.773,177,4.388,178,4.326,179,4.326,180,3.187,181,3.187,182,1.66,183,2.305,184,3.187,185,3.187,186,3.187]],["title/interfaces/Course.html",[187,1.488,188,1.359]],["body/interfaces/Course.html",[3,0.231,4,0.197,5,0.197,7,0.386,9,0.345,17,0.034,20,0.75,27,0.616,34,0.014,42,0.982,49,0.231,73,0.231,96,0.02,97,0.014,164,1.292,187,1.257,188,2.783,189,1.7,190,2.209,191,1.766,192,3.723,193,1.982,194,1.804,195,2.106,196,3.516,197,3.516,198,3.516,199,2.798,200,3.117,201,3.516,202,3.516,203,3.516,204,3.516,205,3.516,206,3.516,207,3.516,208,3.875,209,1.592,210,4.148,211,3.17,212,3.17,213,4.051,214,2.963,215,3.117,216,4.051,217,3.17,218,3.17,219,1.982,220,2.439,221,3.17,222,3.17,223,3.17,224,3.17,225,2.561,226,2.407]],["title/controllers/CoursesController.html",[0,1.245,227,2.012]],["body/controllers/CoursesController.html",[0,1.433,2,0.811,3,0.163,4,0.139,5,0.139,7,0.273,9,0.243,10,0.98,11,1.968,16,2.036,17,0.034,19,1.572,23,1.113,26,1.572,27,0.865,28,1.572,30,1.572,34,0.01,38,2.705,42,0.865,49,0.429,51,1.201,52,1.201,53,2.314,54,0.335,59,0.888,61,1.201,63,2.314,64,1.201,65,1.879,66,0.743,70,0.811,71,0.811,73,0.163,74,0.093,75,0.682,76,0.976,78,1.877,82,1.201,84,1.355,90,1.201,93,1.865,96,0.015,97,0.01,164,1.063,168,0.98,171,1.865,176,2.314,188,2.609,209,1.764,220,2.618,227,1.879,228,1.561,229,1.355,230,4.612,231,2.119,232,2.442,233,3.008,234,2.442,235,2.442,236,2.119,237,1.561,238,3.334,239,2.119,240,1.873,241,2.119,242,4.31,243,1.873,244,1.561,245,1.561,246,1.873,247,1.881,248,3.399,249,1.873,250,1.355,251,1.561,252,1.947,253,2.119,254,2.119,255,1.873,256,1.527,257,1.873,258,1.561,259,3.676,260,2.442,261,2.442,262,2.442,263,2.119,264,2.119,265,1.873,266,3.399,267,2.119,268,1.873,269,1.873,270,2.953,271,1.873,272,2.931,273,1.873,274,1.561,275,1.873,276,2.119,277,1.873,278,1.355,279,1.355,280,1.355,281,1.355,282,1.201,283,1.881,284,1.561,285,1.355,286,1.355,287,1.355,288,1.355,289,2.611,290,2.611,291,2.309,292,1.201,293,1.078,294,1.355,295,0.976,296,1.561,297,1.873,298,1.873,299,1.355,300,1.355,301,1.355,302,1.873,303,1.355,304,2.611,305,1.561,306,1.873,307,1.873,308,1.561,309,2.119,310,3.611,311,2.119,312,1.873,313,1.561,314,1.873,315,1.561,316,2.127,317,3.611,318,1.873,319,1.873,320,1.873,321,1.873,322,1.561,323,1.873,324,1.873,325,1.561,326,2.442,327,1.873,328,2.611,329,1.355,330,1.355,331,1.873,332,2.442,333,1.561,334,1.355,335,3.008,336,1.873,337,1.355,338,1.355,339,1.873,340,3.008,341,1.873,342,1.355]],["title/modules/CoursesModule.html",[98,1.049,110,1.806]],["body/modules/CoursesModule.html",[2,2.191,3,0.353,4,0.3,5,0.3,17,0.033,27,0.655,34,0.021,49,0.519,54,0.725,73,0.353,74,0.201,96,0.026,97,0.021,98,1.844,100,1.754,101,1.754,102,2.109,103,2.109,104,1.754,105,2.872,106,2.872,110,3.539,113,2.634,114,2.109,115,2.109,118,2.33,123,2.596,124,1.754,188,1.754,227,3.535,283,3.323,284,3.374,343,3.374,344,3.374,345,3.374,346,4.05,347,4.05,348,3.657,349,4.05,350,2.929,351,2.596]],["title/injectables/CoursesService.html",[154,0.619,283,1.634]],["body/injectables/CoursesService.html",[3,0.219,4,0.186,5,0.186,7,0.733,9,0.326,10,1.222,11,2.059,17,0.034,19,1.758,23,1.245,26,1.684,27,0.815,28,1.684,30,1.758,34,0.013,42,0.698,49,0.459,54,0.449,70,1.582,71,1.086,73,0.219,74,0.124,75,0.913,78,1.758,93,2.086,96,0.019,97,0.013,124,1.086,154,0.72,155,0.995,158,2.342,169,3.397,171,2.086,174,1.442,188,2.653,191,0.995,209,1.764,219,2.467,220,3.036,226,0.995,230,4.8,232,3.043,233,3.043,234,3.043,235,3.043,238,3.458,247,1.903,252,1.833,256,1.903,283,1.903,295,1.306,296,2.088,326,2.088,333,2.088,335,3.043,340,3.043,352,2.088,353,3.653,354,4.736,355,3.653,356,2.507,357,2.642,358,3.653,359,2.507,360,3.653,361,2.507,362,3.043,363,3.653,364,2.507,365,2.507,366,2.342,367,2.507,368,2.507,369,2.642,370,2.507,371,1.813,372,2.507,373,2.507,374,2.507,375,4.736,376,2.088,377,2.642,378,2.507,379,2.507,380,2.507,381,2.507,382,1.813,383,1.813,384,1.813]],["title/classes/CreateCourseDTO.html",[74,0.155,238,1.806]],["body/classes/CreateCourseDTO.html",[3,0.177,4,0.151,5,0.151,7,0.296,9,0.264,16,2.476,17,0.034,20,0.841,23,1.368,27,0.69,34,0.01,42,0.935,49,0.177,66,0.806,73,0.177,74,0.101,96,0.016,97,0.01,164,1.051,188,2.797,194,1.479,195,1.646,196,2.748,197,2.748,198,2.748,199,2.187,200,2.436,201,2.748,202,2.748,203,2.748,204,2.748,205,2.748,206,2.748,207,2.748,208,3.658,209,1.612,210,4.061,211,3.552,212,3.552,213,4.35,214,2.795,215,3.347,216,4.215,217,3.552,218,3.552,219,2.221,220,2.733,221,3.552,222,3.552,223,3.552,224,3.552,225,1.796,226,2.522,238,2.454,385,1.169,386,4.859,387,1.692,388,2.031,389,4.47,390,3.872,391,3.824,392,2.031,393,2.031,394,2.031,395,2.031,396,2.031,397,2.031,398,2.031,399,2.031,400,2.031,401,2.031,402,2.031,403,2.031,404,2.031,405,1.302,406,5.059,407,2.031,408,1.692]],["title/classes/CreateNodeDTO.html",[74,0.155,409,1.806]],["body/classes/CreateNodeDTO.html",[3,0.257,4,0.219,5,0.219,7,0.429,9,0.383,16,2.402,17,0.034,20,1.005,23,1.348,27,0.825,34,0.015,42,0.921,49,0.257,66,1.17,73,0.257,74,0.146,96,0.021,97,0.015,164,1.2,194,1.944,195,2.042,199,2.713,200,3.022,209,1.758,214,3.191,215,3.719,219,2.655,225,3.5,226,2.414,385,1.696,389,4.398,390,3.686,391,3.555,405,1.89,408,3.416,409,2.36,410,4.833,411,2.456,412,4.101,413,2.511,414,3.416,415,4.114,416,3.41,417,3.022,418,3.647,419,2.948,420,2.948,421,2.948,422,2.948,423,2.948,424,2.948,425,2.948]],["title/classes/CreateUserDTO.html",[74,0.155,426,1.806]],["body/classes/CreateUserDTO.html",[3,0.233,4,0.198,5,0.198,7,0.388,9,0.347,16,2.45,17,0.034,20,1.271,23,1.364,27,0.915,34,0.014,42,0.932,49,0.233,66,1.059,73,0.233,74,0.132,96,0.02,97,0.014,164,1.331,168,1.849,182,2.88,194,1.812,195,1.935,209,1.078,210,3.126,226,2.512,385,1.536,389,4.445,390,4.09,391,3.626,405,1.711,426,2.806,427,4.868,428,2.223,429,3.229,430,3.229,431,3.999,432,3.229,433,3.999,434,3.999,435,2.669,436,4.876,437,4.876,438,2.669,439,2.669,440,4.876,441,2.669,442,2.669,443,4.062,444,2.669,445,2.669,446,2.669,447,2.669]],["title/injectables/JwtAuthGuard.html",[59,1.488,154,0.619]],["body/injectables/JwtAuthGuard.html",[3,0.403,4,0.342,5,0.342,7,0.671,17,0.033,34,0.024,49,0.478,54,0.826,55,4.864,56,2.403,59,2.863,73,0.403,74,0.228,96,0.028,97,0.024,154,1.08,155,1.831,193,3.041,282,2.957,448,3.843,449,4.614]],["title/injectables/JwtStrategy.html",[136,1.806,154,0.619]],["body/injectables/JwtStrategy.html",[3,0.34,4,0.289,5,0.289,7,0.568,9,0.507,10,1.652,11,1.813,17,0.034,19,1.304,23,1.17,26,1.304,27,0.631,28,1.304,30,1.304,34,0.02,42,0.631,49,0.473,54,0.698,56,2.031,73,0.34,74,0.193,75,1.799,78,1.304,96,0.025,97,0.02,136,3.279,148,3.249,149,3.249,154,0.974,155,1.548,167,3.653,168,1.304,177,4.747,193,2.823,195,1.69,391,2.5,450,3.249,451,4.516,452,4.516,453,3.9,454,4.939,455,3.9,456,3.9,457,3.249,458,2.82,459,3.249,460,3.249,461,3.249,462,3.9,463,3.9,464,3.9,465,3.9,466,3.9,467,3.9]],["title/injectables/LocalStrategy.html",[137,1.806,154,0.619]],["body/injectables/LocalStrategy.html",[3,0.328,4,0.278,5,0.278,7,0.546,9,0.488,10,1.612,11,1.78,17,0.034,19,1.255,20,1.05,23,0.889,26,1.255,27,0.607,28,1.255,30,1.255,34,0.019,42,0.607,49,0.49,54,0.672,56,1.955,57,2.524,73,0.328,74,0.186,75,1.367,76,1.955,78,1.612,93,1.489,96,0.025,97,0.019,137,3.233,139,3.127,154,0.95,155,1.489,164,1.287,167,3.601,168,1.879,169,2.773,171,1.489,182,3.149,193,2.773,252,1.367,316,1.955,451,4.435,457,3.127,458,2.714,460,3.127,461,3.127,468,3.127,469,4.82,470,3.753,471,3.127,472,3.753,473,3.753,474,4.82,475,3.753]],["title/interfaces/Node.html",[187,1.488,413,1.245]],["body/interfaces/Node.html",[3,0.301,4,0.256,5,0.256,7,0.502,9,0.448,17,0.034,20,0.899,27,0.738,34,0.018,42,0.959,49,0.301,73,0.301,96,0.023,97,0.018,164,1.35,187,1.634,189,2.21,191,2.028,192,4.089,193,2.375,194,2.162,195,2.355,199,3.129,200,3.485,209,1.533,214,3.254,215,3.485,219,2.375,225,3.343,226,2.352,413,2.537,415,4.201,416,3.932,417,3.485,418,3.724,476,2.872]],["title/controllers/UniversitiesController.html",[0,1.245,477,2.012]],["body/controllers/UniversitiesController.html",[0,1.368,2,0.755,3,0.152,4,0.129,5,0.129,7,0.254,9,0.227,10,0.926,11,1.982,16,2.07,17,0.034,19,1.598,23,1.132,26,1.598,27,0.865,28,1.598,30,1.598,34,0.009,38,2.854,42,0.847,49,0.446,51,1.118,52,1.118,53,2.209,54,0.312,59,0.827,61,1.118,63,2.209,64,1.118,65,1.776,66,0.692,68,0.635,69,1.261,70,0.755,71,0.755,73,0.152,74,0.086,75,0.635,76,0.908,78,1.869,82,1.118,90,1.118,93,1.897,96,0.014,97,0.009,112,0.755,120,1.261,164,1.073,171,1.809,174,1.003,176,2.209,209,1.755,219,1.443,229,1.261,239,2.003,241,2.003,242,4.33,247,1.795,248,3.297,250,1.261,252,1.98,256,1.443,258,1.453,259,3.786,263,2.003,264,2.003,266,3.586,267,2.003,270,3.456,276,2.838,278,1.261,279,1.261,280,1.261,281,1.261,282,1.118,285,1.261,286,1.261,287,1.261,288,1.261,289,2.492,290,2.492,291,2.23,292,1.118,293,1.003,294,1.261,295,0.908,299,1.261,300,1.261,301,1.261,303,2.003,304,1.261,308,1.453,309,2.003,311,2.003,313,2.308,315,1.453,316,2.583,328,2.492,329,1.261,330,1.261,332,2.308,334,1.261,337,1.261,338,1.261,342,1.261,409,3.287,413,2.322,477,1.776,478,1.453,479,4.597,480,2.308,481,2.308,482,2.871,483,2.308,484,2.308,485,2.77,486,2.308,487,1.744,488,1.744,489,1.744,490,1.744,491,1.744,492,1.744,493,1.744,494,1.744,495,1.744,496,1.744,497,1.744,498,1.744,499,1.744,500,1.744,501,1.744,502,3.798,503,1.744,504,1.744,505,2.77,506,1.744,507,1.744,508,3.798,509,1.744,510,1.795,511,1.453,512,1.453,513,1.744,514,1.744,515,1.744,516,1.744,517,1.744,518,1.744,519,1.453,520,1.744,521,2.77,522,1.744,523,1.744,524,1.744,525,1.744,526,1.744,527,1.744,528,1.744,529,3.446,530,1.744,531,1.744,532,1.744,533,1.744,534,1.744,535,1.744,536,1.744,537,2.871,538,1.744,539,1.744,540,1.453,541,2.871,542,1.744,543,1.744,544,2.871,545,1.744]],["title/modules/UniversitiesModule.html",[98,1.049,111,1.806]],["body/modules/UniversitiesModule.html",[2,2.149,3,0.343,4,0.291,5,0.291,17,0.033,27,0.636,34,0.02,49,0.525,54,0.703,73,0.343,74,0.194,96,0.026,97,0.02,98,1.819,100,1.701,101,1.701,102,2.046,103,2.046,104,1.701,105,2.832,106,2.832,111,3.589,112,2.606,113,2.584,114,2.046,115,2.046,118,2.855,120,2.84,123,2.518,124,1.701,350,2.84,351,2.518,413,1.559,477,3.486,510,3.31,511,3.272,546,3.272,547,3.928,548,3.272,549,3.272,550,3.928,551,3.928,552,3.587,553,3.928]],["title/injectables/UniversitiesService.html",[154,0.619,510,1.634]],["body/injectables/UniversitiesService.html",[3,0.162,4,0.137,5,0.137,7,0.521,9,0.24,10,0.971,11,1.964,17,0.034,19,1.782,20,0.365,23,1.233,26,1.693,27,0.893,28,1.693,30,1.741,34,0.01,42,0.58,49,0.442,54,0.331,68,1.305,70,1.258,71,0.802,73,0.162,74,0.092,75,0.674,78,1.915,93,1.941,96,0.015,97,0.01,124,0.802,154,0.573,155,0.734,158,1.861,164,0.775,168,0.619,169,3.176,171,1.749,174,1.671,183,1.338,191,0.734,209,1.754,226,0.734,247,1.512,252,1.605,256,1.512,295,0.964,322,2.984,357,2.099,366,1.861,369,2.099,371,1.338,376,1.542,377,2.591,382,1.338,383,1.338,384,1.338,409,3.26,413,2.155,417,1.861,418,2.825,452,1.542,479,2.419,480,2.419,481,2.419,482,2.419,483,2.419,484,2.419,486,3.38,502,4.77,508,4.438,510,1.512,512,1.542,519,4.438,537,1.542,540,1.542,541,2.419,544,2.419,554,1.542,555,2.903,556,2.903,557,2.903,558,2.903,559,1.851,560,2.903,561,1.851,562,2.903,563,1.851,564,2.903,565,5.207,566,5.665,567,1.851,568,2.903,569,2.903,570,1.851,571,3.582,572,2.903,573,2.903,574,1.851,575,2.903,576,1.851,577,2.903,578,1.851,579,1.851,580,1.851,581,1.851,582,1.851,583,1.851,584,2.903,585,1.851,586,4.407,587,1.851,588,1.542,589,1.542,590,3.582,591,1.851,592,4.057,593,1.851,594,1.851,595,1.851,596,1.851,597,2.903,598,2.903,599,2.903,600,1.851,601,1.851,602,1.851,603,1.851,604,1.851,605,1.851,606,1.851,607,1.851,608,1.851,609,1.851,610,1.851,611,1.851,612,1.851]],["title/interfaces/User.html",[20,0.619,187,1.488]],["body/interfaces/User.html",[3,0.285,4,0.242,5,0.242,7,0.474,9,0.424,17,0.034,20,1.266,34,0.017,42,0.974,49,0.285,73,0.285,96,0.023,97,0.017,164,1.402,168,1.912,182,2.978,187,1.546,189,2.09,191,1.972,192,4.014,193,2.288,194,2.083,195,2.303,209,1.239,226,2.389,429,4.135,430,4.135,431,4.135,432,4.135,433,4.135,434,4.135,613,2.716]],["title/classes/UserLoginDTO.html",[32,2.012,74,0.155]],["body/classes/UserLoginDTO.html",[3,0.361,4,0.307,5,0.307,7,0.602,9,0.538,16,2.221,17,0.034,20,1.148,23,1.214,32,3.731,34,0.021,42,0.83,49,0.447,66,1.643,73,0.361,74,0.254,96,0.026,97,0.021,164,1.26,168,1.714,182,3.116,194,2.43,385,2.382,405,2.653,614,3.448,615,5.569,616,4.139,617,4.139,618,4.139,619,4.139,620,4.139,621,4.139,622,5.126,623,5.126,624,3.448,625,4.139,626,4.139]],["title/controllers/UsersController.html",[0,1.245,117,2.012]],["body/controllers/UsersController.html",[0,1.492,2,0.865,3,0.174,4,0.148,5,0.148,7,0.291,9,0.26,10,1.03,11,1.944,16,1.978,17,0.034,19,1.527,20,1.213,23,1.082,26,1.527,27,0.841,28,1.527,30,1.527,34,0.01,38,2.628,42,0.841,49,0.439,51,1.28,52,1.28,53,2.41,54,0.358,59,0.947,60,1.664,61,1.28,63,1.975,64,1.28,65,1.975,66,0.793,68,1.539,70,0.865,71,0.865,73,0.174,74,0.099,75,0.727,76,1.04,78,1.88,82,1.28,84,1.444,90,1.28,93,2.061,94,2.566,96,0.016,97,0.01,117,1.975,164,0.988,168,1.414,171,1.915,176,2.41,183,1.444,209,1.361,229,1.444,231,2.228,236,2.228,237,1.664,239,1.444,241,2.228,242,4.273,244,1.664,245,1.664,247,1.959,248,3.057,250,1.444,251,1.664,252,1.94,253,3.057,254,3.057,256,1.604,259,3.49,260,2.566,261,1.664,262,1.664,263,1.444,264,1.444,266,3.057,267,2.228,270,2.228,274,1.664,276,2.228,278,1.444,279,1.444,280,1.444,281,1.444,285,1.444,286,1.444,287,1.444,288,1.444,289,2.228,290,2.719,291,2.202,293,1.149,294,1.444,295,1.04,299,1.444,300,1.444,301,1.444,303,1.444,304,2.228,305,1.664,309,1.444,311,1.444,316,2.202,325,1.664,328,2.719,329,1.444,330,1.444,334,1.444,337,1.444,338,1.444,342,1.444,366,3.329,426,3.374,588,1.664,627,1.664,628,2.566,629,3.133,630,2.566,631,1.997,632,1.997,633,1.997,634,4.986,635,1.997,636,1.997,637,1.997,638,1.997,639,1.997,640,1.997,641,1.997,642,1.997,643,1.664,644,1.664,645,1.664,646,1.997,647,1.997,648,1.997,649,1.997,650,1.997,651,1.997,652,3.081,653,1.997,654,1.997,655,3.081,656,3.76,657,1.997,658,3.081,659,3.081,660,2.566,661,1.997,662,3.081,663,1.664,664,1.997,665,3.133,666,1.997,667,1.997,668,3.133,669,1.997]],["title/modules/UsersModule.html",[98,1.049,112,1.359]],["body/modules/UsersModule.html",[3,0.361,4,0.307,5,0.307,17,0.033,20,0.816,27,0.67,34,0.021,49,0.508,54,0.741,68,2.33,73,0.361,74,0.205,96,0.026,97,0.021,98,1.862,100,1.793,101,1.793,102,2.156,103,2.156,104,1.793,105,2.901,106,2.901,112,2.677,113,2.67,114,2.156,115,2.156,118,2.382,123,2.653,124,1.793,350,2.993,351,2.653,644,3.448,670,3.448,671,3.448,672,3.448,673,4.139,674,3.707,675,4.139]],["title/injectables/UsersService.html",[68,1.143,154,0.619]],["body/injectables/UsersService.html",[3,0.192,4,0.163,5,0.163,7,0.729,9,0.286,10,1.109,11,2.05,17,0.034,19,1.739,20,1.24,23,1.268,26,1.739,27,0.842,28,1.739,30,1.79,34,0.011,42,0.772,49,0.437,54,0.394,68,1.208,70,1.729,71,0.953,73,0.192,74,0.109,75,0.801,78,1.739,93,2.064,96,0.017,97,0.011,124,0.953,154,0.654,155,0.873,158,2.126,164,1.126,168,1.896,169,3.377,171,2.125,174,1.266,191,0.873,209,1.574,226,0.873,231,2.398,236,3.213,247,1.727,252,1.949,253,1.591,254,1.591,256,1.727,295,1.146,316,1.146,357,2.398,362,2.763,366,3.683,369,2.398,371,1.591,377,2.398,382,1.591,383,1.591,384,1.591,414,3.702,426,3.377,589,2.763,628,2.763,629,2.763,630,2.763,634,3.325,643,1.833,645,1.833,660,1.833,663,1.833,665,2.763,668,2.763,676,1.833,677,3.316,678,3.316,679,3.316,680,3.316,681,2.2,682,4.175,683,3.316,684,2.2,685,3.316,686,4.444,687,3.316,688,3.316,689,2.2,690,3.316,691,2.2,692,3.316,693,2.2,694,3.316,695,2.2,696,2.2,697,3.316,698,2.2,699,2.2,700,2.2,701,2.2,702,2.2,703,4.444,704,3.316,705,2.2,706,2.2,707,2.2,708,2.2,709,2.2,710,2.2]],["title/injectables/ValidateObjectId.html",[154,0.619,291,1.634]],["body/injectables/ValidateObjectId.html",[3,0.343,4,0.291,5,0.291,7,0.572,9,0.51,10,1.659,11,1.819,17,0.034,19,1.313,23,0.93,26,1.313,27,0.636,28,1.313,30,1.313,34,0.02,42,0.636,49,0.433,54,0.703,70,2.475,73,0.343,74,0.194,78,1.659,96,0.026,97,0.02,154,0.978,155,1.559,164,1.177,167,3.18,171,1.559,191,2.267,209,1.108,252,1.43,291,2.584,292,3.18,293,2.855,316,2.046,711,3.272,712,4.961,713,4.961,714,4.759,715,5.713,716,3.928,717,5.713,718,4.53,719,4.961,720,3.928,721,3.928,722,3.928,723,3.928]],["title/coverage.html",[724,3.096]],["body/coverage.html",[0,2.156,1,2.205,5,0.255,6,2.866,17,0.033,20,0.678,32,2.205,34,0.018,42,0.557,57,1.631,59,1.631,68,1.253,74,0.269,96,0.023,97,0.018,104,1.49,116,2.488,117,2.205,128,2.488,136,1.979,137,1.979,154,1.186,156,2.866,187,2.42,188,1.49,190,2.866,227,2.205,228,2.866,238,1.979,252,1.253,282,2.205,283,1.792,291,1.792,292,2.205,293,1.979,348,2.488,352,2.866,386,2.866,387,2.866,409,1.979,410,2.866,411,2.866,413,1.365,426,1.979,427,2.866,428,2.866,448,2.866,450,2.866,468,2.866,476,2.866,477,2.205,478,2.866,510,1.792,552,2.488,554,2.866,613,2.866,614,2.866,627,2.866,674,2.488,676,2.866,682,2.866,711,2.866,724,2.488,725,2.866,726,3.44,727,3.44,728,6.464,729,3.44,730,5.433,731,5.806,732,5.104,733,4.553,734,4.553,735,4.553,736,2.866,737,2.866,738,3.44,739,5.104,740,2.866,741,5.104,742,2.866,743,3.44,744,3.44,745,3.44,746,3.44]],["title/dependencies.html",[101,1.635,747,2.622]],["body/dependencies.html",[17,0.034,34,0.02,54,0.707,56,2.055,66,1.566,71,1.709,74,0.246,96,0.026,97,0.02,101,1.709,124,1.709,144,2.853,172,3.287,191,1.975,413,1.566,458,3.941,459,3.287,471,3.287,624,3.287,714,3.287,748,3.946,749,5.722,750,3.946,751,3.946,752,3.946,753,3.946,754,3.946,755,4.976,756,3.946,757,3.946,758,4.976,759,3.946,760,3.946,761,3.946,762,3.946,763,3.946,764,3.946,765,3.946,766,3.946,767,3.946,768,3.946,769,3.946,770,3.946,771,4.976,772,3.946,773,3.287,774,4.976,775,3.946,776,3.946,777,3.946,778,3.946,779,3.946,780,3.946,781,3.946,782,3.946,783,3.946,784,3.946,785,3.946,786,3.946,787,3.946,788,3.946]],["title/miscellaneous/functions.html",[789,1.68,790,3.144]],["body/miscellaneous/functions.html",[9,0.643,17,0.029,34,0.025,96,0.029,97,0.025,104,2.676,737,4.125,789,3.174,790,4.125,791,4.951]],["title/index.html",[9,0.341,792,2.622,793,2.622]],["body/index.html",[4,0.269,7,0.527,8,3.019,17,0.033,34,0.019,96,0.024,97,0.019,127,3.786,443,3.019,724,2.621,725,4.362,773,4.362,794,3.624,795,3.624,796,4.712,797,3.624,798,3.624,799,3.624,800,3.624,801,3.624,802,3.624,803,3.624,804,3.624,805,3.624,806,5.236,807,3.624,808,3.624,809,3.624,810,3.624,811,6.081,812,3.624,813,3.624,814,6.081,815,3.624,816,3.624,817,4.712,818,3.624,819,3.624,820,3.624,821,4.712,822,3.624,823,5.236,824,3.624,825,3.624,826,3.624,827,3.624,828,3.624,829,3.624,830,3.624,831,3.624,832,3.624,833,4.712,834,4.712,835,3.624,836,3.624,837,3.624,838,3.624,839,3.624,840,3.624,841,3.624,842,4.712,843,4.712,844,3.624,845,3.624,846,3.624,847,3.624,848,3.624,849,3.019,850,3.624,851,3.624,852,3.624,853,3.624,854,3.624,855,3.624,856,3.624,857,3.624,858,3.624,859,3.624,860,3.624,861,3.624,862,3.624,863,3.624,864,3.624,865,3.624,866,3.624,867,3.624]],["title/modules.html",[100,1.854]],["body/modules.html",[17,0.029,34,0.024,96,0.029,97,0.024,99,3.023,100,2.043,109,2.714,110,2.714,111,2.714,112,2.043,849,5.167,868,6.202,869,6.202,870,6.202]],["title/overview.html",[871,3.566]],["body/overview.html",[2,1.584,17,0.033,34,0.019,57,2.849,68,2.188,96,0.024,97,0.019,98,1.223,99,3.981,100,1.584,101,1.584,102,1.904,103,1.904,104,1.584,105,1.904,106,1.904,107,3.045,108,3.045,109,3.62,110,3.398,111,3.505,112,2.639,113,2.468,114,1.904,115,1.904,132,3.045,134,3.045,135,3.045,136,3.025,137,3.025,155,1.451,189,2.343,283,3.13,343,3.045,344,3.045,345,3.045,385,2.104,510,3.13,546,3.045,548,3.045,549,3.045,670,3.045,671,3.045,672,3.045,871,3.045,872,3.656,873,4.738,874,3.656,875,3.656]],["title/miscellaneous/variables.html",[789,1.68,876,3.144]],["body/miscellaneous/variables.html",[9,0.492,17,0.032,20,0.747,34,0.019,96,0.025,97,0.019,116,2.738,127,2.738,128,3.866,129,3.155,130,3.155,164,1.393,168,1.266,182,1.972,188,1.64,191,2.122,195,2.316,196,2.738,197,2.738,198,2.738,199,2.789,201,2.738,202,2.738,203,2.738,204,2.738,205,2.738,206,2.738,207,2.738,208,2.738,210,3.933,214,2.789,225,3.076,252,1.947,348,3.505,351,3.427,413,1.503,415,2.738,416,2.738,417,2.427,418,2.427,429,2.738,430,2.738,431,2.738,432,2.738,433,2.738,434,2.738,552,3.505,674,3.505,718,4.696,736,3.155,740,3.155,742,3.155,789,2.427,876,3.155,877,3.787,878,3.787,879,3.787,880,3.787,881,5.636,882,5.346,883,4.847]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":603,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["0.1.13",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["0.12.2",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["0.2.25",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["1.0.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["10/10",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["13.9.1",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["201",{"_index":47,"title":{},"body":{"controllers/AppController.html":{}}}],["3",{"_index":875,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["3.5.9",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":873,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["4.5.12",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["4.6.2",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":872,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["5.10.0",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["5.7.36",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["6.5.4",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["6h",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["7.0.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["7.0.2",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["7.1.0",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":874,"title":{},"body":{"overview.html":{}}}],["8.2.0",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["8.6.2",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":739,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":745,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":744,"title":{},"body":{"coverage.html":{}}}],["_id",{"_index":195,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"interfaces/Node.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":357,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["addcourse",{"_index":353,"title":{},"body":{"injectables/CoursesService.html":{}}}],["addcourse(createcoursedto",{"_index":355,"title":{},"body":{"injectables/CoursesService.html":{}}}],["addnode",{"_index":480,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["addnode(@res",{"_index":536,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["addnode(createnodedto",{"_index":558,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["addnode(res",{"_index":487,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["address",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduser",{"_index":231,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adduser(@res",{"_index":325,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["adduser(createuserdto",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduser(res",{"_index":237,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["admin",{"_index":617,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["admin@admin.com",{"_index":620,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["allnodes",{"_index":565,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["allnodes,allusers",{"_index":596,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["allnodes.filter(x=>x.parentnode",{"_index":590,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["allusers",{"_index":566,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["allusers.filter(x=>x._id",{"_index":605,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["already",{"_index":253,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["always",{"_index":45,"title":{},"body":{"controllers/AppController.html":{}}}],["amazing",{"_index":850,"title":{},"body":{"index.html":{}}}],["angular",{"_index":805,"title":{},"body":{"index.html":{}}}],["apibadrequestresponse",{"_index":287,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apibadrequestresponse({description:'invalid",{"_index":311,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiforbiddenresponse",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiforbiddenresponse({description",{"_index":83,"title":{},"body":{"controllers/AppController.html":{}}}],["apiforbiddenresponse({description:'course",{"_index":331,"title":{},"body":{"controllers/CoursesController.html":{}}}],["apiforbiddenresponse({description:'forbidden",{"_index":304,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiforbiddenresponse({description:'user",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":288,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse({description:'course",{"_index":310,"title":{},"body":{"controllers/CoursesController.html":{}}}],["apinotfoundresponse({description:'node",{"_index":515,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["apinotfoundresponse({description:'user",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({description",{"_index":81,"title":{},"body":{"controllers/AppController.html":{}}}],["apiokresponse({description:'the",{"_index":303,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":289,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":405,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UserLoginDTO.html":{}}}],["apiproperty({description",{"_index":389,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{}}}],["apiproperty({example:'admin",{"_index":626,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["apiproperty({example:'admin@admin.com",{"_index":625,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["apiquery",{"_index":290,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":285,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apitags('courses",{"_index":298,"title":{},"body":{"controllers/CoursesController.html":{}}}],["apitags('login",{"_index":72,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('universities",{"_index":514,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["apitags('users",{"_index":648,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags,apiunauthorizedresponse",{"_index":62,"title":{},"body":{"controllers/AppController.html":{}}}],["apiunauthorizedresponse",{"_index":286,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse({description",{"_index":85,"title":{},"body":{"controllers/AppController.html":{}}}],["apiunauthorizedresponse({description:'access",{"_index":299,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"index.html":{}}}],["app.controler",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":802,"title":{},"body":{"index.html":{}}}],["applied",{"_index":826,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":99,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["argumentmetadata",{"_index":715,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["array",{"_index":225,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"miscellaneous/variables.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["auth",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{}}}],["auth.guard",{"_index":61,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":448,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":139,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":58,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/jwt",{"_index":60,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["authguard",{"_index":55,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":449,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":109,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":860,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":57,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice,private",{"_index":77,"title":{},"body":{"controllers/AppController.html":{}}}],["await",{"_index":93,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":839,"title":{},"body":{"index.html":{}}}],["backers",{"_index":851,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":720,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["badrequestexception('invalid",{"_index":723,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["bcrypt",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["body",{"_index":53,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["bootstrap",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":870,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":868,"title":{},"body":{"modules.html":{}}}],["building",{"_index":797,"title":{},"body":{"index.html":{}}}],["changelog",{"_index":830,"title":{},"body":{"index.html":{}}}],["checkemail",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["checkemail(email",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["checking",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":74,"title":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UserLoginDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":385,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"classes/UserLoginDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":107,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":135,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_coursesmodule",{"_index":343,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_exports",{"_index":344,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_coursesmodule_providers",{"_index":345,"title":{},"body":{"modules/CoursesModule.html":{},"overview.html":{}}}],["cluster_universitiesmodule",{"_index":546,"title":{},"body":{"modules/UniversitiesModule.html":{},"overview.html":{}}}],["cluster_universitiesmodule_exports",{"_index":548,"title":{},"body":{"modules/UniversitiesModule.html":{},"overview.html":{}}}],["cluster_universitiesmodule_imports",{"_index":547,"title":{},"body":{"modules/UniversitiesModule.html":{}}}],["cluster_universitiesmodule_providers",{"_index":549,"title":{},"body":{"modules/UniversitiesModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":670,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":671,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":672,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compodoc",{"_index":840,"title":{},"body":{"index.html":{}}}],["compodocsupport",{"_index":841,"title":{},"body":{"index.html":{}}}],["connectableobservabledescriptor",{"_index":581,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["const",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["constructor",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UniversitiesService.html":{}}}],["constructor(@injectmodel('course",{"_index":372,"title":{},"body":{"injectables/CoursesService.html":{}}}],["constructor(@injectmodel('user",{"_index":700,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":76,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["consultations",{"_index":211,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["consultationsnumber",{"_index":196,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["contact",{"_index":436,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["contactphone",{"_index":429,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["control",{"_index":212,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('courses",{"_index":297,"title":{},"body":{"controllers/CoursesController.html":{}}}],["controller('universities",{"_index":513,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["controller('users",{"_index":647,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"controllers/UsersController.html":{},"overview.html":{}}}],["controlworksnumber",{"_index":197,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["course",{"_index":188,"title":{"interfaces/Course.html":{}},"body":{"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["course.dto",{"_index":296,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["course.dto.ts",{"_index":387,"title":{},"body":{"classes/CreateCourseDTO.html":{},"coverage.html":{}}}],["course.dto.ts:10",{"_index":388,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:16",{"_index":394,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:22",{"_index":400,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:28",{"_index":397,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:34",{"_index":399,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:40",{"_index":403,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:46",{"_index":401,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:52",{"_index":398,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:58",{"_index":402,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:64",{"_index":393,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:70",{"_index":392,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:76",{"_index":404,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:82",{"_index":395,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["course.dto.ts:88",{"_index":396,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["coursemodel",{"_index":373,"title":{},"body":{"injectables/CoursesService.html":{}}}],["coursename",{"_index":198,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["courses",{"_index":230,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["courses.controller",{"_index":347,"title":{},"body":{"modules/CoursesModule.html":{}}}],["courses.service",{"_index":284,"title":{},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{}}}],["courses/courses.module",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["courseschema",{"_index":348,"title":{},"body":{"modules/CoursesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["coursescontroller",{"_index":227,"title":{"controllers/CoursesController.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"coverage.html":{}}}],["coursesmodule",{"_index":110,"title":{"modules/CoursesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules.html":{},"overview.html":{}}}],["coursesservice",{"_index":283,"title":{"injectables/CoursesService.html":{}},"body":{"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"coverage.html":{},"overview.html":{}}}],["coverage",{"_index":724,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":412,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["createcoursedto",{"_index":238,"title":{"classes/CreateCourseDTO.html":{}},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"coverage.html":{}}}],["createcoursedto._id",{"_index":333,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["created",{"_index":215,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{}}}],["createddate",{"_index":199,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"miscellaneous/variables.html":{}}}],["createdduser",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createduser",{"_index":200,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{}}}],["createnodedto",{"_index":409,"title":{"classes/CreateNodeDTO.html":{}},"body":{"classes/CreateNodeDTO.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"coverage.html":{}}}],["createnodedto._id",{"_index":540,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["createuserdto",{"_index":426,"title":{"classes/CreateUserDTO.html":{}},"body":{"classes/CreateUserDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto._id",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto.email",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["credentials",{"_index":40,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["data",{"_index":362,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UsersService.html":{}}}],["database",{"_index":127,"title":{},"body":{"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["date",{"_index":214,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/UniversitiesController.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["delete",{"_index":247,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete('/delete",{"_index":338,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["delete('/delete')@apinotfoundresponse({description",{"_index":244,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["delete('/delete')@apiquery({name",{"_index":490,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["deletecourse",{"_index":232,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["deletecourse(@res",{"_index":339,"title":{},"body":{"controllers/CoursesController.html":{}}}],["deletecourse(id",{"_index":358,"title":{},"body":{"injectables/CoursesService.html":{}}}],["deletecourse(res",{"_index":243,"title":{},"body":{"controllers/CoursesController.html":{}}}],["deleted",{"_index":342,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["deletedcourse",{"_index":340,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["deletednode",{"_index":544,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["deleteduser",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deletenode",{"_index":481,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["deletenode(@res",{"_index":543,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["deletenode(id",{"_index":560,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["deletenode(res",{"_index":489,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["deleteuser",{"_index":628,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(@res",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteuser(id",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(res",{"_index":633,"title":{},"body":{"controllers/UsersController.html":{}}}],["department",{"_index":220,"title":{},"body":{"interfaces/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{}}}],["departmentiid",{"_index":272,"title":{},"body":{"controllers/CoursesController.html":{}}}],["departments",{"_index":322,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/UniversitiesService.html":{}}}],["dependencies",{"_index":101,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"index.html":{}}}],["description:'the",{"_index":309,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["development",{"_index":813,"title":{},"body":{"index.html":{}}}],["document",{"_index":192,"title":{},"body":{"interfaces/Course.html":{},"interfaces/Node.html":{},"interfaces/User.html":{}}}],["documentation",{"_index":725,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["doesn't",{"_index":37,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["doesn\\'t",{"_index":86,"title":{},"body":{"controllers/AppController.html":{}}}],["dotenv",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["down",{"_index":828,"title":{},"body":{"index.html":{}}}],["dto",{"_index":414,"title":{},"body":{"classes/CreateNodeDTO.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":295,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":835,"title":{},"body":{"index.html":{}}}],["edit",{"_index":256,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["editcourse",{"_index":233,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["editcourse(id",{"_index":360,"title":{},"body":{"injectables/CoursesService.html":{}}}],["editcourse(res",{"_index":249,"title":{},"body":{"controllers/CoursesController.html":{}}}],["editedcourse",{"_index":335,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["editednode",{"_index":541,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["editeduser",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["editnode",{"_index":482,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["editnode(id",{"_index":562,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["editnode(res",{"_index":492,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["edituser",{"_index":629,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["edituser(id",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["edituser(res",{"_index":636,"title":{},"body":{"controllers/UsersController.html":{}}}],["education",{"_index":223,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["efficient",{"_index":798,"title":{},"body":{"index.html":{}}}],["element._id",{"_index":593,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["element.nodename",{"_index":594,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["email",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["email}).exec",{"_index":706,"title":{},"body":{"injectables/UsersService.html":{}}}],["exec",{"_index":377,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["exist",{"_index":38,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["exist!'})@apiquery({name",{"_index":245,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["exist.'})@apibadrequestresponse({description",{"_index":262,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["existence",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":254,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":301,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["expiresin",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":73,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["exports",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":193,"title":{},"body":{"interfaces/Course.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"interfaces/User.html":{}}}],["extractjwt",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":463,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":391,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{}}}],["fastify",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["fetch",{"_index":266,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["find",{"_index":589,"title":{},"body":{"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["find({\"parentdepartment",{"_index":379,"title":{},"body":{"injectables/CoursesService.html":{}}}],["find({\"parentnode",{"_index":587,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["findbyidandremove(id",{"_index":384,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["findbyidandupdate(id",{"_index":382,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["findone({\"_id",{"_index":376,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{}}}],["findone({\"_id\":userid",{"_index":704,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":440,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["firstname",{"_index":430,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["forbidden",{"_index":84,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["forbidden.'})@apinotfoundresponse({description",{"_index":261,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["forbidden.'})@apiunauthorizedresponse({description",{"_index":36,"title":{},"body":{"controllers/AppController.html":{}}}],["forbiddenexception",{"_index":643,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["forbiddenexception('user",{"_index":710,"title":{},"body":{"injectables/UsersService.html":{}}}],["framework",{"_index":796,"title":{},"body":{"index.html":{}}}],["function",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":790,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/courses",{"_index":302,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get('/courses')@apiokresponse({description",{"_index":275,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get('/tree",{"_index":517,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('/tree')@apiokresponse({description",{"_index":507,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('/universities",{"_index":523,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('/universities')@apiokresponse({description",{"_index":498,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('/users",{"_index":649,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/users')@apiokresponse({description",{"_index":641,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id",{"_index":308,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{}}}],["get(':id')@apiokresponse({description",{"_index":258,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{}}}],["get(':userid",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':userid')@apiokresponse({description",{"_index":639,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('courses/:departmentiid",{"_index":319,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get('courses/:departmentiid')@apiokresponse({description",{"_index":269,"title":{},"body":{"controllers/CoursesController.html":{}}}],["get('nodes/:id",{"_index":531,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('nodes/:id')@apiokresponse({description",{"_index":501,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["get('profile",{"_index":91,"title":{},"body":{"controllers/AppController.html":{}}}],["getcourse",{"_index":234,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["getcourse(@res",{"_index":312,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getcourse(id",{"_index":363,"title":{},"body":{"injectables/CoursesService.html":{}}}],["getcourse(res",{"_index":257,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getcourses",{"_index":354,"title":{},"body":{"injectables/CoursesService.html":{}}}],["getcoursesdepartmentid",{"_index":235,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["getcoursesdepartmentid(@res",{"_index":320,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getcoursesdepartmentid(id",{"_index":367,"title":{},"body":{"injectables/CoursesService.html":{}}}],["getcoursesdepartmentid(id:any",{"_index":378,"title":{},"body":{"injectables/CoursesService.html":{}}}],["getcoursesdepartmentid(res",{"_index":268,"title":{},"body":{"controllers/CoursesController.html":{}}}],["getdepartments",{"_index":555,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getdepartments(id",{"_index":564,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getinstitutions",{"_index":556,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getinstitutions(id",{"_index":569,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getnode",{"_index":483,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["getnode(@res",{"_index":527,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnode(id",{"_index":573,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getnode(res",{"_index":494,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnodes",{"_index":484,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["getnodes(@res",{"_index":524,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnodes(id",{"_index":575,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getnodes(res",{"_index":497,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnodespatentid",{"_index":485,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnodespatentid(@res",{"_index":532,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getnodespatentid(res",{"_index":500,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getprofile",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(@request",{"_index":92,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":15,"title":{},"body":{"controllers/AppController.html":{}}}],["getteachers",{"_index":557,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getteachers(teachers",{"_index":577,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["getting",{"_index":792,"title":{"index.html":{}},"body":{}}],["gettree",{"_index":486,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["gettree(@res",{"_index":518,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["gettree(res",{"_index":506,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["getuser",{"_index":630,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getuser(@res",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(res",{"_index":638,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(userid",{"_index":694,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers",{"_index":236,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers(@res",{"_index":305,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["getusers(res",{"_index":274,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["getusersinc",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusersinc(userid",{"_index":697,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":846,"title":{},"body":{"index.html":{}}}],["heavily",{"_index":803,"title":{},"body":{"index.html":{}}}],["here",{"_index":857,"title":{},"body":{"index.html":{}}}],["hours",{"_index":216,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["hours',required",{"_index":407,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["hoursnumber",{"_index":201,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["http://localhost:3001/api",{"_index":838,"title":{},"body":{"index.html":{}}}],["https://nestjs.com",{"_index":864,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":278,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["id",{"_index":209,"title":{},"body":{"interfaces/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["id!'})@apiparam({name",{"_index":264,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["id',required",{"_index":408,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{}}}],["id'})@apibadrequestresponse({description",{"_index":503,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["id'})@apiforbiddenresponse({description",{"_index":271,"title":{},"body":{"controllers/CoursesController.html":{}}}],["id.pipes",{"_index":294,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["id.pipes.ts",{"_index":711,"title":{},"body":{"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["id.pipes.ts:14",{"_index":716,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["identifier",{"_index":726,"title":{},"body":{"coverage.html":{}}}],["if(teachers.length",{"_index":602,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["if(user",{"_index":607,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["ignore",{"_index":75,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ignoreexpiration",{"_index":464,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":721,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["import",{"_index":49,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["imports",{"_index":118,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["injectable",{"_index":154,"title":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["injectables",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"overview.html":{}}}],["injectmodel",{"_index":371,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["injectmodel('node",{"_index":585,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["inspired",{"_index":804,"title":{},"body":{"index.html":{}}}],["installation",{"_index":810,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":812,"title":{},"body":{"index.html":{}}}],["institute",{"_index":568,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["institutions",{"_index":571,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["interests",{"_index":431,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":187,"title":{"interfaces/Course.html":{},"interfaces/Node.html":{},"interfaces/User.html":{}},"body":{"interfaces/Course.html":{},"interfaces/Node.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["interfaces",{"_index":189,"title":{},"body":{"interfaces/Course.html":{},"interfaces/Node.html":{},"interfaces/User.html":{},"overview.html":{}}}],["interfaces/course.interface",{"_index":370,"title":{},"body":{"injectables/CoursesService.html":{}}}],["interfaces/node.interface",{"_index":580,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["interfaces/user.interface",{"_index":699,"title":{},"body":{"injectables/UsersService.html":{}}}],["invalid",{"_index":263,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["isemail",{"_index":622,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["isemail()@apiproperty({example",{"_index":619,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["isnotempty",{"_index":623,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["isnotempty()@apiproperty({example",{"_index":616,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["isvalid",{"_index":717,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["join",{"_index":853,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":459,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":59,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":462,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":136,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":861,"title":{},"body":{"index.html":{}}}],["laboratory",{"_index":217,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["laboratoryworksnumber",{"_index":202,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["last",{"_index":443,"title":{},"body":{"classes/CreateUserDTO.html":{},"index.html":{}}}],["lastname",{"_index":432,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["lectures",{"_index":218,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["lecturesnumber",{"_index":203,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["license",{"_index":867,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":843,"title":{},"body":{"index.html":{}}}],["list",{"_index":276,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["local",{"_index":471,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["local.strategy",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["localstrategy",{"_index":137,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["login(req",{"_index":31,"title":{},"body":{"controllers/AppController.html":{}}}],["login(user",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["logout(@request",{"_index":89,"title":{},"body":{"controllers/AppController.html":{}}}],["logout(req",{"_index":43,"title":{},"body":{"controllers/AppController.html":{}}}],["matching",{"_index":96,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["mentors",{"_index":415,"title":{},"body":{"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["metadata",{"_index":714,"title":{},"body":{"injectables/ValidateObjectId.html":{},"dependencies.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["migrate",{"_index":773,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["migration",{"_index":827,"title":{},"body":{"index.html":{}}}],["migrations",{"_index":821,"title":{},"body":{"index.html":{}}}],["miscellaneous",{"_index":789,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":842,"title":{},"body":{"index.html":{}}}],["mode",{"_index":817,"title":{},"body":{"index.html":{}}}],["model",{"_index":369,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":98,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":100,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mongo",{"_index":823,"title":{},"body":{"index.html":{}}}],["mongodb",{"_index":71,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongodb+srv://alex:admin@cluster0.jczgn.mongodb.net/edu4u?retrywrites=true&w=majority",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["mongoose",{"_index":191,"title":{},"body":{"interfaces/Course.html":{},"injectables/CoursesService.html":{},"interfaces/Node.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["mongoose.schema",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mongoose.types.objectid.isvalid(value",{"_index":722,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["mongoosemodule",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":350,"title":{},"body":{"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forroot(url",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":856,"title":{},"body":{"index.html":{}}}],["mysecret",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["myśliwiec",{"_index":862,"title":{},"body":{"index.html":{}}}],["name",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["nest",{"_index":806,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":866,"title":{},"body":{"index.html":{}}}],["nestjs/cli",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["nestjs/common",{"_index":54,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":124,"title":{},"body":{"modules/AppModule.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":56,"title":{},"body":{"controllers/AppController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":66,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"controllers/UniversitiesController.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjsx/crud",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":252,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newcourse",{"_index":326,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/CoursesService.html":{}}}],["newcourse.save",{"_index":381,"title":{},"body":{"injectables/CoursesService.html":{}}}],["newnode",{"_index":537,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["newnode.save",{"_index":612,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["newuser",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["newuser.save",{"_index":708,"title":{},"body":{"injectables/UsersService.html":{}}}],["node",{"_index":413,"title":{"interfaces/Node.html":{}},"body":{"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["node._id",{"_index":598,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["node.dto",{"_index":512,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["node.dto.ts",{"_index":411,"title":{},"body":{"classes/CreateNodeDTO.html":{},"coverage.html":{}}}],["node.dto.ts:10",{"_index":419,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:16",{"_index":423,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:22",{"_index":424,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:28",{"_index":425,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:34",{"_index":422,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:40",{"_index":420,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.dto.ts:46",{"_index":421,"title":{},"body":{"classes/CreateNodeDTO.html":{}}}],["node.js",{"_index":795,"title":{},"body":{"index.html":{}}}],["node.nodename",{"_index":599,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["nodemodel",{"_index":584,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["nodename",{"_index":416,"title":{},"body":{"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":502,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["nodes).map(node",{"_index":597,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["nodes.map(element",{"_index":591,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["nodeschema",{"_index":552,"title":{},"body":{"modules/UniversitiesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":281,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["notfoundexception('course",{"_index":317,"title":{},"body":{"controllers/CoursesController.html":{}}}],["notfoundexception('incorrect",{"_index":334,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["notfoundexception('newnode",{"_index":539,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["notfoundexception('node",{"_index":529,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["notfoundexception('nodes",{"_index":534,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["notfoundexception('universities",{"_index":521,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["notfoundexception('user",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["npm",{"_index":811,"title":{},"body":{"index.html":{}}}],["null",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["number",{"_index":210,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateUserDTO.html":{},"miscellaneous/variables.html":{}}}],["number',required",{"_index":406,"title":{},"body":{"classes/CreateCourseDTO.html":{}}}],["object",{"_index":293,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["objectid",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["objectid(id",{"_index":315,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{}}}],["objectid(req.user._id",{"_index":95,"title":{},"body":{"controllers/AppController.html":{}}}],["objectid(userid",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{}}}],["open",{"_index":844,"title":{},"body":{"index.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["out",{"_index":115,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":871,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":747,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":78,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["param('departmentiid",{"_index":321,"title":{},"body":{"controllers/CoursesController.html":{}}}],["param('id",{"_index":313,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{}}}],["param('userid",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["parent",{"_index":219,"title":{},"body":{"interfaces/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{}}}],["parentdepartment",{"_index":204,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["parentnode",{"_index":417,"title":{},"body":{"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"injectables/UniversitiesService.html":{},"miscellaneous/variables.html":{}}}],["particular",{"_index":267,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["pass",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":460,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["password",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"miscellaneous/variables.html":{}}}],["passwordvalidation",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["patent",{"_index":505,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["payload",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":467,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":466,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["phone",{"_index":437,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["pipes/validate",{"_index":646,"title":{},"body":{"controllers/UsersController.html":{}}}],["pipetransform",{"_index":719,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["please",{"_index":854,"title":{},"body":{"index.html":{}}}],["post",{"_index":51,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["post('/add",{"_index":239,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["post('/add')@apiforbiddenresponse({description",{"_index":631,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('auth/login",{"_index":80,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/logout",{"_index":88,"title":{},"body":{"controllers/AppController.html":{}}}],["post('auth/logout')@apiokresponse({description",{"_index":44,"title":{},"body":{"controllers/AppController.html":{}}}],["practices",{"_index":221,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["practicesnumber",{"_index":205,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":229,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["print",{"_index":829,"title":{},"body":{"index.html":{}}}],["private",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_uri",{"_index":129,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["process.env.jwt_expires_in",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["process.env.jwt_secret",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":819,"title":{},"body":{"index.html":{}}}],["profile",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@apiunauthorizedresponse({description",{"_index":21,"title":{},"body":{"controllers/AppController.html":{}}}],["progressive",{"_index":794,"title":{},"body":{"index.html":{}}}],["project",{"_index":845,"title":{},"body":{"index.html":{}}}],["promise",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/LocalStrategy.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":194,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"interfaces/Node.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{}}}],["providers",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["put",{"_index":279,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["put('/edit",{"_index":330,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["put('/edit')@apiquery({name",{"_index":250,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["query",{"_index":280,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["query('id",{"_index":332,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{}}}],["query('userid",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["read",{"_index":855,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":226,"title":{},"body":{"interfaces/Course.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"interfaces/Node.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":809,"title":{},"body":{"index.html":{}}}],["req",{"_index":29,"title":{},"body":{"controllers/AppController.html":{}}}],["request",{"_index":50,"title":{},"body":{"controllers/AppController.html":{}}}],["require('bcrypt",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{}}}],["required",{"_index":390,"title":{},"body":{"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{}}}],["res",{"_index":242,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json",{"_index":328,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(course",{"_index":318,"title":{},"body":{"controllers/CoursesController.html":{}}}],["res.status(httpstatus.ok).json(courses",{"_index":307,"title":{},"body":{"controllers/CoursesController.html":{}}}],["res.status(httpstatus.ok).json(departments",{"_index":324,"title":{},"body":{"controllers/CoursesController.html":{}}}],["res.status(httpstatus.ok).json(node",{"_index":530,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["res.status(httpstatus.ok).json(nodes",{"_index":535,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["res.status(httpstatus.ok).json(tree",{"_index":522,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["res.status(httpstatus.ok).json(universities",{"_index":526,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["res.status(httpstatus.ok).json(user",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["res.status(httpstatus.ok).json(users",{"_index":650,"title":{},"body":{"controllers/UsersController.html":{}}}],["reset",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["result",{"_index":34,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":97,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["returned",{"_index":270,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["returned.'})@apibadrequestresponse({description",{"_index":495,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["returned.'})@apiforbiddenresponse({description",{"_index":260,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["rimraf",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":433,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":814,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["rxjs/internal/observable/connectableobservable",{"_index":582,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["scalable",{"_index":799,"title":{},"body":{"index.html":{}}}],["schema",{"_index":351,"title":{},"body":{"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["schemas/course.schema",{"_index":349,"title":{},"body":{"modules/CoursesModule.html":{}}}],["schemas/node.schema",{"_index":553,"title":{},"body":{"modules/UniversitiesModule.html":{}}}],["schemas/user.schema",{"_index":675,"title":{},"body":{"modules/UsersModule.html":{}}}],["secret",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":465,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["self",{"_index":222,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["selfeducationhours",{"_index":206,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["seminars",{"_index":224,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["seminarsnumber",{"_index":207,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["server",{"_index":800,"title":{},"body":{"index.html":{}}}],["service",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["side",{"_index":801,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"modules/CoursesModule.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"index.html":{}}}],["sponsors",{"_index":848,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../course.schema.ts",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../node.schema.ts",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controler.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controler.ts:29",{"_index":41,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controler.ts:40",{"_index":48,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controler.ts:55",{"_index":24,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":116,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.module.ts",{"_index":138,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:22",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":282,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UniversitiesController.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":450,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:23",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/local.strategy.ts",{"_index":468,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/local.strategy.ts:21",{"_index":470,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/courses/courses.controller.ts",{"_index":228,"title":{},"body":{"controllers/CoursesController.html":{},"coverage.html":{}}}],["src/courses/courses.controller.ts:118",{"_index":246,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.controller.ts:29",{"_index":277,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.controller.ts:45",{"_index":265,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.controller.ts:64",{"_index":273,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.controller.ts:75",{"_index":240,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.controller.ts:92",{"_index":255,"title":{},"body":{"controllers/CoursesController.html":{}}}],["src/courses/courses.module.ts",{"_index":346,"title":{},"body":{"modules/CoursesModule.html":{}}}],["src/courses/courses.service.ts",{"_index":352,"title":{},"body":{"injectables/CoursesService.html":{},"coverage.html":{}}}],["src/courses/courses.service.ts:19",{"_index":365,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/courses.service.ts:28",{"_index":364,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/courses.service.ts:39",{"_index":368,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/courses.service.ts:50",{"_index":356,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/courses.service.ts:61",{"_index":361,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/courses.service.ts:71",{"_index":359,"title":{},"body":{"injectables/CoursesService.html":{}}}],["src/courses/dto/create",{"_index":386,"title":{},"body":{"classes/CreateCourseDTO.html":{},"coverage.html":{}}}],["src/courses/interfaces/course.interface.ts",{"_index":190,"title":{},"body":{"interfaces/Course.html":{},"coverage.html":{}}}],["src/courses/schemas/course.schema.ts",{"_index":736,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/pipes/validate",{"_index":292,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["src/universities/dto/create",{"_index":410,"title":{},"body":{"classes/CreateNodeDTO.html":{},"coverage.html":{}}}],["src/universities/interfaces/node.interface.ts",{"_index":476,"title":{},"body":{"interfaces/Node.html":{},"coverage.html":{}}}],["src/universities/schemas/node.schema.ts",{"_index":740,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/universities/universities.controller.ts",{"_index":478,"title":{},"body":{"controllers/UniversitiesController.html":{},"coverage.html":{}}}],["src/universities/universities.controller.ts:113",{"_index":493,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:138",{"_index":491,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:31",{"_index":509,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:45",{"_index":499,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:63",{"_index":496,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:80",{"_index":504,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.controller.ts:94",{"_index":488,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["src/universities/universities.module.ts",{"_index":550,"title":{},"body":{"modules/UniversitiesModule.html":{}}}],["src/universities/universities.service.ts",{"_index":554,"title":{},"body":{"injectables/UniversitiesService.html":{},"coverage.html":{}}}],["src/universities/universities.service.ts:105",{"_index":578,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:126",{"_index":559,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:137",{"_index":563,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:147",{"_index":561,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:27",{"_index":576,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:38",{"_index":574,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:48",{"_index":579,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:70",{"_index":570,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/universities/universities.service.ts:88",{"_index":567,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/users/dto/create",{"_index":427,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/users/dto/userilogin.dto.ts",{"_index":614,"title":{},"body":{"classes/UserLoginDTO.html":{},"coverage.html":{}}}],["src/users/dto/userilogin.dto.ts:13",{"_index":621,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["src/users/dto/userilogin.dto.ts:20",{"_index":618,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["src/users/interfaces/user.interface.ts",{"_index":613,"title":{},"body":{"interfaces/User.html":{},"coverage.html":{}}}],["src/users/schemas/user.schema.ts",{"_index":742,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/users/users.controller.ts",{"_index":627,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:110",{"_index":635,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:31",{"_index":642,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:47",{"_index":640,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:62",{"_index":632,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:80",{"_index":637,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":140,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/users/users.module.ts",{"_index":673,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":583,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["src/users/users.service.ts",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:20",{"_index":696,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:29",{"_index":695,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":698,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:47",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:67",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:77",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":815,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":818,"title":{},"body":{"index.html":{}}}],["start:proddatabase",{"_index":820,"title":{},"body":{"index.html":{}}}],["started",{"_index":793,"title":{"index.html":{}},"body":{}}],["starter",{"_index":808,"title":{},"body":{"index.html":{}}}],["statements",{"_index":727,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":46,"title":{},"body":{"controllers/AppController.html":{}}}],["statustest",{"_index":831,"title":{},"body":{"index.html":{}}}],["stay",{"_index":858,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"miscellaneous/variables.html":{}}}],["string})@apiforbiddenresponse({description",{"_index":251,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UsersController.html":{}}}],["students",{"_index":208,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["submit",{"_index":241,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["submitted",{"_index":329,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["successfully",{"_index":259,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":461,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":849,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":869,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":746,"title":{},"body":{"coverage.html":{}}}],["teacher",{"_index":608,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["teacher)[0",{"_index":606,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["teachers",{"_index":418,"title":{},"body":{"classes/CreateNodeDTO.html":{},"interfaces/Node.html":{},"injectables/UniversitiesService.html":{},"miscellaneous/variables.html":{}}}],["teachers).map(teacher",{"_index":604,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["test",{"_index":834,"title":{},"body":{"index.html":{}}}],["test:covapi",{"_index":837,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":836,"title":{},"body":{"index.html":{}}}],["tests",{"_index":833,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":847,"title":{},"body":{"index.html":{}}}],["this.authservice.login(req.user['_doc",{"_index":87,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.validateuser(email",{"_index":473,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.coursemodel",{"_index":375,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursemodel(createcoursedto",{"_index":380,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursemodel.find().exec",{"_index":374,"title":{},"body":{"injectables/CoursesService.html":{}}}],["this.coursesservice.addcourse(createcoursedto",{"_index":327,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.deletecourse(id",{"_index":341,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.editcourse(id",{"_index":336,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.getcourse(new",{"_index":314,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.getcourses",{"_index":306,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.coursesservice.getcoursesdepartmentid(id",{"_index":323,"title":{},"body":{"controllers/CoursesController.html":{}}}],["this.finduserbyemail(email",{"_index":709,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getdepartments(node[\"id",{"_index":600,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["this.getinstitutions(element._id,allnodes,allusers",{"_index":595,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["this.getteachers(node.teachers",{"_index":601,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["this.jwtservice.sign(payload",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.nodemodel",{"_index":586,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["this.nodemodel(createnodedto",{"_index":611,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["this.universitiesservice.addnode(createnodedto",{"_index":538,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.deletenode(id",{"_index":545,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.editnode(id",{"_index":542,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.getnode(new",{"_index":528,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.getnodes",{"_index":525,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.getnodes(id",{"_index":533,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.universitiesservice.gettree",{"_index":520,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["this.usermodel",{"_index":703,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel(createuserdto",{"_index":707,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.find().exec",{"_index":702,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone({\"email",{"_index":705,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.adduser(createuserdto",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.checkemail(createuserdto.email",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(userid",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.edituser(userid",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuser(new",{"_index":94,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["this.usersservice.getusers",{"_index":588,"title":{},"body":{"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{}}}],["throw",{"_index":316,"title":{},"body":{"controllers/CoursesController.html":{},"injectables/LocalStrategy.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{}}}],["title",{"_index":434,"title":{},"body":{"classes/CreateUserDTO.html":{},"interfaces/User.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":82,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["token'})@apiforbiddenresponse({description",{"_index":35,"title":{},"body":{"controllers/AppController.html":{}}}],["touch",{"_index":859,"title":{},"body":{"index.html":{}}}],["transform",{"_index":712,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["transform(value",{"_index":713,"title":{},"body":{"injectables/ValidateObjectId.html":{}}}],["transformer",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["tree",{"_index":508,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["tree.push",{"_index":592,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["true",{"_index":383,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"injectables/UsersService.html":{}}}],["ts",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["twitter",{"_index":865,"title":{},"body":{"index.html":{}}}],["type",{"_index":42,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"controllers/CoursesController.html":{},"injectables/CoursesService.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["typeorm",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["types/mongoose",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["types/node",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":807,"title":{},"body":{"index.html":{}}}],["ui",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["unapplied",{"_index":822,"title":{},"body":{"index.html":{}}}],["unauthorized",{"_index":22,"title":{},"body":{"controllers/AppController.html":{}}}],["unauthorizedexception",{"_index":472,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["unauthorizedexception(user.message",{"_index":475,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["undo",{"_index":825,"title":{},"body":{"index.html":{}}}],["unit",{"_index":832,"title":{},"body":{"index.html":{}}}],["universiry",{"_index":572,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["universities",{"_index":479,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["universities.controller",{"_index":551,"title":{},"body":{"modules/UniversitiesModule.html":{}}}],["universities.service",{"_index":511,"title":{},"body":{"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{}}}],["universities/universities.module",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["universitiescontroller",{"_index":477,"title":{"controllers/UniversitiesController.html":{}},"body":{"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"coverage.html":{}}}],["universitiesmodule",{"_index":111,"title":{"modules/UniversitiesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UniversitiesModule.html":{},"modules.html":{},"overview.html":{}}}],["universitiesservice",{"_index":510,"title":{"injectables/UniversitiesService.html":{}},"body":{"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"injectables/UniversitiesService.html":{},"coverage.html":{},"overview.html":{}}}],["up",{"_index":824,"title":{},"body":{"index.html":{}}}],["updated",{"_index":337,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["url",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["useguards",{"_index":52,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard('local",{"_index":79,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(jwtauthguard",{"_index":90,"title":{},"body":{"controllers/AppController.html":{},"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard)@get('profile')@apibearerauth()@apiokresponse({description",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["useguards(undefined)@post('auth/login')@apiokresponse({description",{"_index":33,"title":{},"body":{"controllers/AppController.html":{}}}],["user",{"_index":20,"title":{"interfaces/User.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{},"classes/CreateNodeDTO.html":{},"classes/CreateUserDTO.html":{},"injectables/LocalStrategy.html":{},"interfaces/Node.html":{},"injectables/UniversitiesService.html":{},"interfaces/User.html":{},"classes/UserLoginDTO.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user._id",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":645,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":428,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":435,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:17",{"_index":439,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:23",{"_index":445,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:29",{"_index":441,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:35",{"_index":444,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:43",{"_index":438,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:51",{"_index":447,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:59",{"_index":442,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.dto.ts:67",{"_index":446,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["user.email",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{}}}],["user.firstname",{"_index":610,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["user.lastname",{"_index":609,"title":{},"body":{"injectables/UniversitiesService.html":{}}}],["user.password",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.payload",{"_index":474,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["userid",{"_index":634,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userlogindto",{"_index":32,"title":{"classes/UserLoginDTO.html":{}},"body":{"controllers/AppController.html":{},"classes/UserLoginDTO.html":{},"coverage.html":{}}}],["usermodel",{"_index":701,"title":{},"body":{"injectables/UsersService.html":{}}}],["username",{"_index":615,"title":{},"body":{"classes/UserLoginDTO.html":{}}}],["users",{"_index":366,"title":{},"body":{"injectables/CoursesService.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":644,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/dto/userilogin.dto",{"_index":67,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.controller",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":120,"title":{},"body":{"modules/AppModule.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{}}}],["users/users.service",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UniversitiesController.html":{}}}],["userschema",{"_index":674,"title":{},"body":{"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":117,"title":{"controllers/UsersController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["usersmodule",{"_index":112,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"controllers/UniversitiesController.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":68,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice:usersservice",{"_index":516,"title":{},"body":{"controllers/UniversitiesController.html":{}}}],["using",{"_index":248,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["valid",{"_index":300,"title":{},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{}}}],["validate",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ValidateObjectId.html":{}}}],["validate(email",{"_index":469,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateobjectid",{"_index":291,"title":{"injectables/ValidateObjectId.html":{}},"body":{"controllers/CoursesController.html":{},"controllers/UniversitiesController.html":{},"controllers/UsersController.html":{},"injectables/ValidateObjectId.html":{},"coverage.html":{}}}],["validateuser",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":624,"title":{},"body":{"classes/UserLoginDTO.html":{},"dependencies.html":{}}}],["value",{"_index":718,"title":{},"body":{"injectables/ValidateObjectId.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":519,"title":{},"body":{"controllers/UniversitiesController.html":{},"injectables/UniversitiesService.html":{}}}],["variable",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":876,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":816,"title":{},"body":{"index.html":{}}}],["website",{"_index":863,"title":{},"body":{"index.html":{}}}],["works",{"_index":213,"title":{},"body":{"interfaces/Course.html":{},"classes/CreateCourseDTO.html":{}}}],["wrong",{"_index":39,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["you'd",{"_index":852,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoursesModule.html":{},"modules/UniversitiesModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controler.ts\n        \n\n\n            \n                Description\n            \n            \n                App Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')@ApiBearerAuth()@ApiOkResponse({description: 'Return user profile'})@ApiUnauthorizedResponse({description: 'User Unauthorized'})\n                \n            \n\n            \n                \n                    Defined in src/app.controler.ts:55\n                \n            \n\n\n            \n                \n                    Get User profile\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(req, userLoginDto: UserLoginDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@Post('auth/login')@ApiOkResponse({description: 'result Token'})@ApiForbiddenResponse({description: 'Forbidden.'})@ApiUnauthorizedResponse({description: 'User doesn't exist or Wrong credentials.'})\n                \n            \n\n            \n                \n                    Defined in src/app.controler.ts:29\n                \n            \n\n\n            \n                \n                    login User\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userLoginDto\n                                    \n                                                UserLoginDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('auth/logout')@ApiOkResponse({description: 'Always return statusCode: 201'})\n                \n            \n\n            \n                \n                    Defined in src/app.controler.ts:40\n                \n            \n\n\n            \n                \n                    logout User\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Request, Post, UseGuards, Get, Body } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth/auth.service';\nimport { JwtAuthGuard } from './auth/jwt-auth.guard';\nimport { ApiTags,ApiUnauthorizedResponse, ApiOkResponse, ApiForbiddenResponse, ApiBearerAuth} from '@nestjs/swagger';\nimport { UserLoginDTO } from './users/dto/userilogin.dto'; \nimport { UsersService } from './users/users.service';\nimport { ObjectID } from 'mongodb';\n\n/**\n * App Controller\n */\n@ApiTags('Login and Logout')\n@Controller()\nexport class AppController {\n  /**@ignore */\n  constructor(private authService: AuthService,private usersService: UsersService) {}\n  \n  /**\n   * login User\n   * @param req \n   * @param userLoginDto \n   */\n  @UseGuards(AuthGuard('local'))\n  @Post('auth/login')\n  @ApiOkResponse({description: 'result Token'})\n  @ApiForbiddenResponse({description: 'Forbidden.'})\n  @ApiUnauthorizedResponse({description: 'User doesn\\'t exist or Wrong credentials.'})\n  async login(\n    @Request() req, @Body() userLoginDto: UserLoginDTO) {\n    return this.authService.login(req.user['_doc']);\n  }\n  \n  /**\n   * logout User\n   * @param req \n   */\n  @Post('auth/logout')\n  @ApiOkResponse({description: 'Always return statusCode: 201'})  \n  async logout(@Request() req) {\n    return {\n      statusCode: 201\n    }\n  }\n  \n  /**\n   * Get User profile\n   * @param req \n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  @ApiBearerAuth()  \n  @ApiOkResponse({description: 'Return user profile'})\n  @ApiUnauthorizedResponse({description: 'User Unauthorized'})\n  async getProfile(@Request() req) {\n    return await this.usersService.getUser(new ObjectID(req.user._id));\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nUniversitiesModule\n\nUniversitiesModule\n\nAppModule -->\n\nUniversitiesModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoursesModule\n                        \n                        \n                            UniversitiesModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { UsersController} from './users/users.controller';\nimport { AppController } from './app.controler';\nimport { MongooseModule } from '@nestjs/mongoose'; \nimport { UniversitiesModule } from './universities/universities.module';\nimport { CoursesModule } from './courses/courses.module';\n \n/**\n * DataBase url\n */\nlet url =  process.env.DB_URI || \"mongodb+srv://alex:admin@cluster0.jczgn.mongodb.net/edu4u?retryWrites=true&w=majority\";\n\n@Module({\n  imports: [ \n    AuthModule,\n    UsersModule,\n    MongooseModule.forRoot(url),\n    UniversitiesModule,\n    CoursesModule,\n  ],\n  controllers: [\n    AppController,\n    UsersController\n  ],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './local.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt.strategy';\n\n@Module({\n  imports: [\n    UsersModule, \n    PassportModule, \n    JwtModule.register({\n      secret: process.env.JWT_SECRET || \"MySecret\",\n      signOptions: { expiresIn: process.env.JWT_EXPIRES_IN || \"6h\"},\n    })\n  ],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Auth Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n                    login user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        access_token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:22\n                \n            \n\n\n            \n                \n                    Validate User \n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user pass\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport { UsersService } from '../users/users.service';\n/**@ignore */\nconst bcrypt = require('bcrypt');\n\n\n/**\n * Auth Service\n */\n@Injectable()\nexport class AuthService {\n  /**@ignore */\n  constructor(private usersService: UsersService, private jwtService: JwtService) {}\n\n  /**\n   * Validate User \n   * @param email user email\n   * @param pass user pass\n   */\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.findUserByEmail(email);\n    if (!user) {\n      return { message: \"User doesn't exist\", payload: null };\n    } \n    const passwordValidation = await bcrypt.compare(pass, user.password); \n    if (passwordValidation) {\n      const { password, ...result } = user;\n      return { payload: result};\n    }\n    return { message: \"Wrong credentials\", payload: null };\n  }\n\n  /**\n   * login user\n   * @param user \n   * @returns access_token\n   */\n  async login(user: any) {\n    const payload = { email: user.email, sub: user._id };\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Course.html":{"url":"interfaces/Course.html","title":"interface - Course","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Course\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/courses/interfaces/course.interface.ts\n        \n\n            \n                Description\n            \n            \n                Course mongoose Document\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        consultationsNumber\n                                \n                                \n                                        controlWorksNumber\n                                \n                                \n                                        courseName\n                                \n                                \n                                        createdDate\n                                \n                                \n                                        createdUser\n                                \n                                \n                                        hoursNumber\n                                \n                                \n                                        laboratoryWorksNumber\n                                \n                                \n                                        lecturesNumber\n                                \n                                \n                                        parentDepartment\n                                \n                                \n                                        practicesNumber\n                                \n                                \n                                        selfEducationHours\n                                \n                                \n                                        seminarsNumber\n                                \n                                \n                                        students\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        consultationsNumber\n                                    \n                                \n                                \n                                    \n                                        consultationsNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course consultations number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        controlWorksNumber\n                                    \n                                \n                                \n                                    \n                                        controlWorksNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course control works number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        courseName\n                                    \n                                \n                                \n                                    \n                                        courseName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course Name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdDate\n                                    \n                                \n                                \n                                    \n                                        createdDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course created Date\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdUser\n                                    \n                                \n                                \n                                    \n                                        createdUser:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course created User id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hoursNumber\n                                    \n                                \n                                \n                                    \n                                        hoursNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course hours number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        laboratoryWorksNumber\n                                    \n                                \n                                \n                                    \n                                        laboratoryWorksNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course laboratory works number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lecturesNumber\n                                    \n                                \n                                \n                                    \n                                        lecturesNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course lectures number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parentDepartment\n                                    \n                                \n                                \n                                    \n                                        parentDepartment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course parent Department id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        practicesNumber\n                                    \n                                \n                                \n                                    \n                                        practicesNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course practices number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        selfEducationHours\n                                    \n                                \n                                \n                                    \n                                        selfEducationHours:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course self education hours\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        seminarsNumber\n                                    \n                                \n                                \n                                    \n                                        seminarsNumber:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course seminars number\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        students\n                                    \n                                \n                                \n                                    \n                                        students:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Course students id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\n/**\n * Course mongoose Document\n */\nexport interface Course extends Document {\n    /**\n     * Course id\n     */\n    readonly _id: string;\n\n    /**\n     * Course Name\n     */\n    readonly courseName: string;\n\n    /**\n     * Course parent Department id\n     */\n    readonly parentDepartment: string;\n\n    /**\n     * Course hours number\n     */\n    readonly hoursNumber: number;\n\n    /**\n     * Course lectures number\n     */\n    readonly lecturesNumber: number;\n\n    /**\n     * Course seminars number\n     */\n    readonly seminarsNumber: number;\n\n    /**\n     * Course practices number\n     */\n    readonly practicesNumber: number;\n\n    /**\n     * Course laboratory works number\n     */\n    readonly laboratoryWorksNumber: number;\n\n    /**\n     * Course self education hours\n     */\n    readonly selfEducationHours: number;\n\n    /**\n     * Course control works number\n     */\n    readonly controlWorksNumber: number;\n\n    /**\n     * Course consultations number\n     */\n    readonly consultationsNumber: number;\n\n    /**\n     * Course students id\n     */\n    readonly students: Array;\n\n    /**\n     * Course created Date\n     */\n    readonly createdDate: Date;\n\n    /**\n     * Course created User id\n     */\n    readonly createdUser: string; \n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CoursesController.html":{"url":"controllers/CoursesController.html","title":"controller - CoursesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CoursesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/courses/courses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                courses\n            \n\n            \n                Description\n            \n            \n                Courses Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUser\n                            \n                            \n                                    Async\n                                deleteCourse\n                            \n                            \n                                    Async\n                                editCourse\n                            \n                            \n                                    Async\n                                getCourse\n                            \n                            \n                                    Async\n                                getCoursesDepartmentId\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addUser(res, createCourseDTO: CreateCourseDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/add')\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:75\n                \n            \n\n\n            \n                \n                    Submit a course\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCourseDTO\n                                    \n                                                CreateCourseDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCourse(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')@ApiNotFoundResponse({description: 'Course does not exist!'})@ApiQuery({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:118\n                \n            \n\n\n            \n                \n                    Delete a course using ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editCourse(res, id, createCourseDTO: CreateCourseDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')@ApiQuery({name: 'id', type: String})@ApiForbiddenResponse({description: 'Course with this new email already exists'})\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:92\n                \n            \n\n\n            \n                \n                    Edit a course\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createCourseDTO\n                                    \n                                                CreateCourseDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCourse(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'The course has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})@ApiNotFoundResponse({description: 'Course does not exist.'})@ApiBadRequestResponse({description: 'Invalid id!'})@ApiParam({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:45\n                \n            \n\n\n            \n                \n                    Fetch a particular course using id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCoursesDepartmentId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCoursesDepartmentId(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('courses/:departmentiId')@ApiOkResponse({description: 'The courses has been successfully returned by department id'})@ApiForbiddenResponse({description: 'Forbidden.'})@ApiNotFoundResponse({description: 'Course does not exist.'})@ApiBadRequestResponse({description: 'Invalid id!'})@ApiParam({name: 'departmentiId', type: String})\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:64\n                \n            \n\n\n            \n                \n                    Fetch courses using department ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/courses')@ApiOkResponse({description: 'The courses list has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/courses/courses.controller.ts:29\n                \n            \n\n\n            \n                \n                    Fetch all courses\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Get, Res, HttpStatus, Post, Body, Param, Put, Query, NotFoundException, Delete } from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { CoursesService} from './courses.service';\nimport { ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiOkResponse, ApiForbiddenResponse, ApiBadRequestResponse, ApiNotFoundResponse, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { ObjectID } from 'mongodb';\nimport { ValidateObjectId } from 'src/pipes/validate-object-id.pipes';\nimport { CreateCourseDTO } from './dto/create-course.dto';\n\n\n/**\n * Courses Controller\n */\n@UseGuards(JwtAuthGuard)\n@Controller('courses')\n@ApiTags('Courses')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({description:'Access Token is not valid or has expired'})\nexport class CoursesController {\n    /**@ignore */\n    constructor(private coursesService: CoursesService) { }  \n    \n    /**\n     * Fetch all courses\n     * @param res \n     */\n    @Get('/courses')\n    @ApiOkResponse({description:'The courses list has been successfully returned.'})\n    @ApiForbiddenResponse({description:'Forbidden.'})\n    async getUsers(@Res() res) {\n      const courses = await this.coursesService.getCourses();\n      return res.status(HttpStatus.OK).json(courses);\n    }\n    \n    /**\n     * Fetch a particular course using id\n     * @param res \n     * @param id \n     */\n    @Get(':id')\n    @ApiOkResponse({ description:'The course has been successfully returned.'})\n    @ApiForbiddenResponse({description:'Forbidden.'})\n    @ApiNotFoundResponse({description:'Course does not exist.'})\n    @ApiBadRequestResponse({description:'Invalid id!'})\n    @ApiParam({ name: 'id', type: String })\n    async getCourse(@Res() res, @Param('id', new ValidateObjectId()) id) {\n      const course = await this.coursesService.getCourse(new ObjectID(id));\n      if (!id) {\n          throw new NotFoundException('Course does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(course);\n    }\n    \n    /**\n     * Fetch courses using department ID\n     * @param res \n     * @param id \n     */\n    @Get('courses/:departmentiId')\n    @ApiOkResponse({ description:'The courses has been successfully returned by department id'})\n    @ApiForbiddenResponse({description:'Forbidden.'})\n    @ApiNotFoundResponse({description:'Course does not exist.'})\n    @ApiBadRequestResponse({description:'Invalid id!'})\n    @ApiParam({ name: 'departmentiId', type: String })\n    async getCoursesDepartmentId(@Res() res, @Param('departmentiId', new ValidateObjectId()) id) {\n        const departments = await this.coursesService.getCoursesDepartmentId(id);\n        return res.status(HttpStatus.OK).json(departments);\n    }\n\n    /**\n     * Submit a course\n     * @param res \n     * @param createCourseDTO \n     */\n    @Post('/add') \n    async addUser(@Res() res, @Body() createCourseDTO: CreateCourseDTO) { \n      const newCourse = await this.coursesService.addCourse(createCourseDTO);\n      return res.status(HttpStatus.OK).json({\n        message: 'Course has been submitted successfully!',\n        course: newCourse,\n      });\n    }   \n\n    /**\n     * Edit a course\n     * @param res \n     * @param id \n     * @param createCourseDTO \n     */\n    @Put('/edit')\n    @ApiQuery({ name: 'id', type: String })\n    @ApiForbiddenResponse({description:'Course with this new email already exists'})\n    async editCourse(\n      @Res() res,\n      @Query('id', new ValidateObjectId()) id,\n      @Body() createCourseDTO: CreateCourseDTO,\n    ) {\n      if (id != createCourseDTO._id) {\n        throw new NotFoundException('Incorrect course id');\n      }\n      const editedCourse= await this.coursesService.editCourse(id, createCourseDTO);\n      if (!editedCourse) {\n          throw new NotFoundException('Course does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'Course has been successfully updated',\n        course: editedCourse,\n      });\n    }\n    \n    /**\n     * Delete a course using ID\n     * @param res \n     * @param id \n     */\n    @Delete('/delete')\n    @ApiNotFoundResponse({description:'Course does not exist!'})\n    @ApiQuery({ name: 'id', type: String })\n    async deleteCourse(@Res() res, @Query('id', new ValidateObjectId()) id) {\n      const deletedCourse = await this.coursesService.deleteCourse(id);\n      if (!deletedCourse) {\n          throw new NotFoundException('Course does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'Course has been deleted!',\n        course: deletedCourse,\n      });\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoursesModule.html":{"url":"modules/CoursesModule.html","title":"module - CoursesModule","body":"\n                   \n\n\n\n\n    Modules\n    CoursesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_exports\n\n\n\ncluster_CoursesModule_providers\n\n\n\n\nCoursesService \n\nCoursesService \n\n\n\nCoursesModule\n\nCoursesModule\n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/courses/courses.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CoursesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CoursesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CoursesController } from './courses.controller';\nimport { CoursesService } from './courses.service';\nimport { CourseSchema } from './schemas/course.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\n\n@Module({\n  imports: [  \n    MongooseModule.forFeature([{ name: 'Course', schema: CourseSchema }]),],\n  controllers: [CoursesController],\n  providers: [CoursesService],\n  exports: [CoursesService]\n})\nexport class CoursesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoursesService.html":{"url":"injectables/CoursesService.html","title":"injectable - CoursesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CoursesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/courses/courses.service.ts\n        \n\n            \n                Description\n            \n            \n                Courses Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCourse\n                            \n                            \n                                    Async\n                                deleteCourse\n                            \n                            \n                                    Async\n                                editCourse\n                            \n                            \n                                    Async\n                                getCourse\n                            \n                            \n                                    Async\n                                getCourses\n                            \n                            \n                                    Async\n                                getCoursesDepartmentId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCourse(createCourseDTO: CreateCourseDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:50\n                \n            \n\n\n            \n                \n                    Add new course\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCourseDTO\n                                    \n                                                CreateCourseDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCourse(id)\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:71\n                \n            \n\n\n            \n                \n                    Delete course\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        course id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editCourse(id: any, createCourseDTO: CreateCourseDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:61\n                \n            \n\n\n            \n                \n                    Edit course data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        course id\n\n                                    \n                                \n                                \n                                    createCourseDTO\n                                    \n                                                CreateCourseDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCourse\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCourse(id)\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:28\n                \n            \n\n\n            \n                \n                    Get course by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Course id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCourses\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCourses()\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:19\n                \n            \n\n\n            \n                \n                    Get all users courses\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCoursesDepartmentId\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCoursesDepartmentId(id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/courses/courses.service.ts:39\n                \n            \n\n\n            \n                \n                    Get courses by parent department id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        parent department id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { Course } from './interfaces/course.interface';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { ObjectId } from 'mongodb';\nimport { CreateCourseDTO } from './dto/create-course.dto';\n\n/**\n * Courses Service\n */\n@Injectable()\nexport class CoursesService {\n    /**@ignore */\n    constructor(@InjectModel('Course') private readonly courseModel: Model) { }\n    \n    /**\n     * Get all users courses\n     */\n    async getCourses() : Promise {\n        const courses = await this.courseModel.find().exec();\n        return courses;\n    }\n\n    /**\n     * Get course by id\n     * @param id Course id\n     */\n    async getCourse(id): Promise { \n        const course = await this.courseModel\n            .findOne({\"_id\": id})\n            .exec(); \n        return course;\n    }\n\n    /**\n     * Get courses by parent department id\n     * @param id parent department id\n     */\n    async getCoursesDepartmentId(id:any): Promise {\n        const courses = await this.courseModel\n            .find({\"parentDepartment\" : id})\n            .exec();\n        return courses;\n    }\n\n    /**\n     * Add new course\n     * @param createCourseDTO \n     */\n    async addCourse(createCourseDTO: CreateCourseDTO): Promise {\n        createCourseDTO._id = new ObjectId();\n        const newCourse = await new this.courseModel(createCourseDTO);\n        return newCourse.save();\n    }\n\n    /**\n     * Edit course data\n     * @param id course id\n     * @param createCourseDTO \n     */\n    async editCourse(id: any, createCourseDTO: CreateCourseDTO) : Promise {\n        const editedCourse= await this.courseModel\n            .findByIdAndUpdate(id, createCourseDTO, { new: true });\n        return editedCourse;\n    }\n\n    /**\n     * Delete course\n     * @param id course id\n     */\n    async deleteCourse(id): Promise {\n        const deletedCourse = await this.courseModel\n            .findByIdAndRemove(id);\n        return deletedCourse;\n    }\n    \n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCourseDTO.html":{"url":"classes/CreateCourseDTO.html","title":"class - CreateCourseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCourseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/courses/dto/create-course.dto.ts\n        \n\n            \n                Description\n            \n            \n                CreateCourseDTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    Readonly\n                                consultationsNumber\n                            \n                            \n                                    Readonly\n                                controlWorksNumber\n                            \n                            \n                                    Readonly\n                                courseName\n                            \n                            \n                                    Readonly\n                                createdDate\n                            \n                            \n                                    Readonly\n                                createdUser\n                            \n                            \n                                    Readonly\n                                hoursNumber\n                            \n                            \n                                    Readonly\n                                laboratoryWorksNumber\n                            \n                            \n                                    Readonly\n                                lecturesNumber\n                            \n                            \n                                    Readonly\n                                parentDepartment\n                            \n                            \n                                    Readonly\n                                practicesNumber\n                            \n                            \n                                    Readonly\n                                selfEducationHours\n                            \n                            \n                                    Readonly\n                                seminarsNumber\n                            \n                            \n                                    Readonly\n                                students\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:10\n                            \n                        \n\n                \n                    \n                        Course id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            consultationsNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course consultations number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:70\n                            \n                        \n\n                \n                    \n                        Course consultations number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            controlWorksNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course control works number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:64\n                            \n                        \n\n                \n                    \n                        Course control works number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            courseName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:16\n                            \n                        \n\n                \n                    \n                        Course Name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course created Date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:82\n                            \n                        \n\n                \n                    \n                        Course created Date\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            createdUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course created User id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:88\n                            \n                        \n\n                \n                    \n                        Course created User id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            hoursNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course hours number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:28\n                            \n                        \n\n                \n                    \n                        Course hours number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            laboratoryWorksNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course laboratory works number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:52\n                            \n                        \n\n                \n                    \n                        Course laboratory works number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lecturesNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course lectures number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:34\n                            \n                        \n\n                \n                    \n                        Course lectures number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            parentDepartment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course parent Department id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Course parent Department id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            practicesNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course practices number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:46\n                            \n                        \n\n                \n                    \n                        Course practices number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            selfEducationHours\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course self education hours', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:58\n                            \n                        \n\n                \n                    \n                        Course self education hours\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seminarsNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course seminars number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:40\n                            \n                        \n\n                \n                    \n                        Course seminars number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            students\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Course students id', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/courses/dto/create-course.dto.ts:76\n                            \n                        \n\n                \n                    \n                        Course students id\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n \n/**\n * CreateCourseDTO\n */\nexport class CreateCourseDTO {\n    /**\n     * Course id\n     */\n    _id: any;\n\n    /**\n     * Course Name\n     */\n    @ApiProperty({description: 'Course Name'})\n    readonly courseName: string;\n\n    /**\n     * Course parent Department id\n     */\n    @ApiProperty({description: 'Course parent Department id'})\n    readonly parentDepartment: string;\n\n    /**\n     * Course hours number\n     */\n    @ApiProperty({description: 'Course hours number',required: false})\n    readonly hoursNumber: number;\n\n    /**\n     * Course lectures number\n     */\n    @ApiProperty({description: 'Course lectures number',required: false})\n    readonly lecturesNumber: number;\n\n    /**\n     * Course seminars number\n     */\n    @ApiProperty({description: 'Course seminars number',required: false})\n    readonly seminarsNumber: number;\n\n    /**\n     * Course practices number\n     */\n    @ApiProperty({description: 'Course practices number',required: false})\n    readonly practicesNumber: number;\n\n    /**\n     * Course laboratory works number\n     */\n    @ApiProperty({description: 'Course laboratory works number',required: false})\n    readonly laboratoryWorksNumber: number;\n\n    /**\n     * Course self education hours\n     */\n    @ApiProperty({description: 'Course self education hours',required: false})\n    readonly selfEducationHours: number;\n\n    /**\n     * Course control works number\n     */\n    @ApiProperty({description: 'Course control works number',required: false})\n    readonly controlWorksNumber: number;\n\n    /**\n     * Course consultations number\n     */\n    @ApiProperty({description: 'Course consultations number',required: false})\n    readonly consultationsNumber: number;\n\n     /**\n     * Course students id\n     */\n    @ApiProperty({description: 'Course students id',required: false})\n    readonly students: Array;\n\n    /**\n     * Course created Date\n     */\n    @ApiProperty({description: 'Course created Date'})\n    readonly createdDate: Date;\n\n    /**\n     * Course created User id\n     */\n    @ApiProperty({description: 'Course created User id'})\n    readonly createdUser: string; \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateNodeDTO.html":{"url":"classes/CreateNodeDTO.html","title":"class - CreateNodeDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateNodeDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/universities/dto/create-node.dto.ts\n        \n\n            \n                Description\n            \n            \n                Create Node DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                createdDate\n                            \n                            \n                                createdUser\n                            \n                            \n                                    Readonly\n                                mentors\n                            \n                            \n                                    Readonly\n                                nodeName\n                            \n                            \n                                    Readonly\n                                parentNode\n                            \n                            \n                                    Readonly\n                                teachers\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:10\n                            \n                        \n\n                \n                    \n                        Node id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Node created Date'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:40\n                            \n                        \n\n                \n                    \n                        Node created Date\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            createdUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Node created User id'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:46\n                            \n                        \n\n                \n                    \n                        Node created User id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            mentors\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Array of the mentors id', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:34\n                            \n                        \n\n                \n                    \n                        Array of the mentors id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            nodeName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Node Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:16\n                            \n                        \n\n                \n                    \n                        Node Name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            parentNode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Parent Node id', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:22\n                            \n                        \n\n                \n                    \n                        Parent Node id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            teachers\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Array\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'Array of the teachers id', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/universities/dto/create-node.dto.ts:28\n                            \n                        \n\n                \n                    \n                        Array of the teachers id\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\n/**\n * Create Node DTO\n */\nexport class CreateNodeDTO {\n    /**\n     * Node id\n     */\n    _id: any;\n\n    /**\n     * Node Name\n     */\n    @ApiProperty({description: 'Node Name'})\n    readonly nodeName: string;\n\n    /**\n     * Parent Node id\n     */\n    @ApiProperty({description: 'Parent Node id' ,required: false})\n    readonly parentNode: string;\n\n    /**\n     * Array of the teachers id\n     */\n    @ApiProperty({description: 'Array of the teachers id',required: false})\n    readonly teachers: Array;\n\n    /**\n     * Array of the mentors id\n     */\n    @ApiProperty({description: 'Array of the mentors id',required: false})\n    readonly mentors: Array;\n\n    /**\n     * Node created Date\n     */\n    @ApiProperty({description: 'Node created Date'})\n    createdDate: Date;\n\n    /**\n     * Node created User id\n     */\n    @ApiProperty({description: 'Node created User id'})\n    createdUser: string; \n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n            \n                Description\n            \n            \n                CreateUserDTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    Readonly\n                                contactPhone\n                            \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                interests\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                role\n                            \n                            \n                                    Readonly\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            _id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:11\n                            \n                        \n\n                \n                    \n                        User id\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            contactPhone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User Contact phone number', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:43\n                            \n                        \n\n                \n                    \n                        User Contact phone number\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User email'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:17\n                            \n                        \n\n                \n                    \n                        User email\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:29\n                            \n                        \n\n                \n                    \n                        User First Name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            interests\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User Interests', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:59\n                            \n                        \n\n                \n                    \n                        User Interests\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:35\n                            \n                        \n\n                \n                    \n                        User Last Name\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:23\n                            \n                        \n\n                \n                    \n                        User password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User Role', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:67\n                            \n                        \n\n                \n                    \n                        User Role\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({description: 'User Title', required: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:51\n                            \n                        \n\n                \n                    \n                        User Title\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n \n/**\n * CreateUserDTO\n */\nexport class CreateUserDTO{\n\n    /**\n     * User id\n     */\n    _id : any;\n\n    /**\n     * User email\n     */\n    @ApiProperty({description: 'User email'})\n    readonly email: string;\n\n    /**\n     * User password\n     */\n    @ApiProperty({description: 'User password'})\n    readonly password: string;\n    \n    /**\n     * User First Name\n     */\n    @ApiProperty({description: 'User First Name'})\n    readonly firstName: string;\n\n    /**\n     * User Last Name\n     */\n    @ApiProperty({description: 'User Last Name'})\n    readonly lastName: string;\n\n    /**\n     * User Contact phone number\n     */\n    @ApiProperty({description: 'User Contact phone number', \n        required: false \n    })\n    readonly contactPhone: string;\n\n    /**\n     * User Title\n     */\n    @ApiProperty({description: 'User Title',\n        required: false \n    })\n    readonly title: string;\n\n    /**\n     * User Interests\n     */\n    @ApiProperty({description: 'User Interests',\n        required: false        \n    })\n    readonly interests: string;\n\n    /**\n     * User Role\n     */\n    @ApiProperty({description: 'User Role',\n        required: false        \n    })\n    readonly role: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n            \n                Description\n            \n            \n                JwtAuthGuard extends AuthGuard\n\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * JwtAuthGuard extends AuthGuard\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                JwtStrategy extends PassportStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            ignore \n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:23\n                \n            \n\n\n            \n                \n                    validate payload\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n/**\n * JwtStrategy extends PassportStrategy\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**ignore */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET || \"MySecret\",\n    });\n  }\n\n  /**\n   * validate payload\n   * @param payload \n   */\n  async validate(payload: any) {\n    return { _id: payload.sub, email: payload.email };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/local.strategy.ts\n        \n\n            \n                Description\n            \n            \n                LocalStrategy extends PassportStrategy\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/local.strategy.ts:21\n                \n            \n\n\n            \n                \n                    Validate user email and password\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { AuthService } from './auth.service';\n\n/**\n * LocalStrategy extends PassportStrategy\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**@ignore */\n  constructor(private authService: AuthService) {\n    super();\n  }\n\n  /**\n   * Validate user email and password\n   * @param email \n   * @param password \n   */\n  async validate(email: string, password: string): Promise { \n    const user = await this.authService.validateUser(email, password);\n    if (!user.payload) {\n      throw new UnauthorizedException(user.message);\n    }\n    return user.payload;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Node.html":{"url":"interfaces/Node.html","title":"interface - Node","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Node\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/universities/interfaces/node.interface.ts\n        \n\n            \n                Description\n            \n            \n                Node mongoose Document\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        createdDate\n                                \n                                \n                                        createdUser\n                                \n                                \n                                        mentors\n                                \n                                \n                                        nodeName\n                                \n                                \n                                        parentNode\n                                \n                                \n                                        teachers\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdDate\n                                    \n                                \n                                \n                                    \n                                        createdDate:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node created Date\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdUser\n                                    \n                                \n                                \n                                    \n                                        createdUser:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node created User\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mentors\n                                    \n                                \n                                \n                                    \n                                        mentors:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node mentors\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodeName\n                                    \n                                \n                                \n                                    \n                                        nodeName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node Name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parentNode\n                                    \n                                \n                                \n                                    \n                                        parentNode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    parent Node id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        teachers\n                                    \n                                \n                                \n                                    \n                                        teachers:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Node teachers\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\n/**\n * Node mongoose Document\n */\nexport interface Node extends Document {\n    /**\n     * Node id\n     */\n    readonly _id: string;\n\n    /**\n     * Node Name\n     */\n    readonly nodeName: string;\n\n    /**\n     * parent Node id\n     */\n    readonly parentNode: string;\n\n    /**\n     * Node teachers\n     */\n    readonly teachers: Array;\n\n    /**\n     * Node mentors\n     */\n    readonly mentors: Array;\n\n    /**\n     * Node created Date\n     */\n    readonly createdDate: Date;\n\n    /**\n     * Node created User\n     */\n    readonly createdUser: string; \n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UniversitiesController.html":{"url":"controllers/UniversitiesController.html","title":"controller - UniversitiesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UniversitiesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/universities/universities.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                universities\n            \n\n            \n                Description\n            \n            \n                Universities Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNode\n                            \n                            \n                                    Async\n                                deleteNode\n                            \n                            \n                                    Async\n                                editNode\n                            \n                            \n                                    Async\n                                getNode\n                            \n                            \n                                    Async\n                                getNodes\n                            \n                            \n                                    Async\n                                getNodesPatentID\n                            \n                            \n                                    Async\n                                getTree\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNode(res, createNodeDTO: CreateNodeDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/add')\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:94\n                \n            \n\n\n            \n                \n                    Submit a node\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNodeDTO\n                                    \n                                                CreateNodeDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteNode(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')@ApiQuery({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:138\n                \n            \n\n\n            \n                \n                    Delete a node using id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editNode(res, id, createNodeDTO: CreateNodeDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')@ApiQuery({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:113\n                \n            \n\n\n            \n                \n                    Edit a node\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNodeDTO\n                                    \n                                                CreateNodeDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'The node has been successfully returned.'})@ApiBadRequestResponse({description: 'Invalid id!'})@ApiParam({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:63\n                \n            \n\n\n            \n                \n                    Fetch a particular node using id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/universities')@ApiOkResponse({description: 'The universities list has been successfully returned.'})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:45\n                \n            \n\n\n            \n                \n                    Fetch all universities\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNodesPatentID\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodesPatentID(res, id)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('nodes/:id')@ApiOkResponse({description: 'The nodes has been successfully returned by parent id'})@ApiBadRequestResponse({description: 'Invalid id!'})@ApiParam({name: 'id', type: String})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:80\n                \n            \n\n\n            \n                \n                    Fetch nodes using patent ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTree\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTree(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/tree')@ApiOkResponse({description: 'The tree of universities list has been successfully returned.'})\n                \n            \n\n            \n                \n                    Defined in src/universities/universities.controller.ts:31\n                \n            \n\n\n            \n                \n                    Fetch all tree of universities\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, UseGuards, Get, Res, Param, Post, Body, Put, Query, Delete, NotFoundException, HttpStatus } from '@nestjs/common';\nimport { JwtAuthGuard } from 'src/auth/jwt-auth.guard';\nimport { ApiTags, ApiBearerAuth, ApiUnauthorizedResponse, ApiOkResponse, ApiForbiddenResponse, ApiNotFoundResponse, ApiBadRequestResponse, ApiParam, ApiQuery } from '@nestjs/swagger';\nimport { ObjectID } from 'mongodb';\nimport { ValidateObjectId } from 'src/pipes/validate-object-id.pipes';\nimport { UniversitiesService } from './universities.service';\nimport { CreateNodeDTO } from './dto/create-node.dto';\nimport {UsersService} from '../users/users.service';\nimport {UsersModule} from '../users/users.module';\n\n/**\n * Universities Controller\n */\n@UseGuards(JwtAuthGuard)\n@Controller('universities')\n@ApiTags('Universities')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({description:'Access Token is not valid or has expired'})\n@ApiForbiddenResponse({description:'Forbidden.'})\n@ApiNotFoundResponse({description:'Node does not exist.'})\nexport class UniversitiesController {\n      /**@ignore */\n      constructor(private universitiesService: UniversitiesService ,private usersService:UsersService ) { }  \n    \n    /**\n     * Fetch all tree of universities\n     * @param res \n     */\n    @Get('/tree')\n    @ApiOkResponse({description:'The tree of universities list has been successfully returned.'})\n    async getTree(@Res() res) {      \n      var tree = await this.universitiesService.getTree();\n      if (!tree) {\n        throw new NotFoundException('Universities does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(tree);\n    }\n\n    /**\n     * Fetch all universities\n     * @param res \n     */\n    @Get('/universities')\n    @ApiOkResponse({description:'The universities list has been successfully returned.'})\n    async getNodes(@Res() res) {\n      const Universities = await this.universitiesService.getNodes(\"\");\n      if (!Universities) {\n        throw new NotFoundException('Universities does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(Universities);\n    }\n       \n\n    /**\n     * Fetch a particular node using id\n     * @param res \n     * @param id \n     */\n    @Get(':id')\n    @ApiOkResponse({ description:'The node has been successfully returned.'})    \n    @ApiBadRequestResponse({description:'Invalid id!'})\n    @ApiParam({ name: 'id', type: String })\n    async getNode(@Res() res, @Param('id', new ValidateObjectId()) id) {\n      const node = await this.universitiesService.getNode(new ObjectID(id));\n      if (!node) {\n          throw new NotFoundException('Node does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(node);\n    }\n    \n    /**\n     * Fetch nodes using patent ID\n     * @param res \n     * @param id \n     */\n    @Get('nodes/:id')\n    @ApiOkResponse({ description:'The nodes has been successfully returned by parent id'})\n    @ApiBadRequestResponse({description:'Invalid id!'})\n    @ApiParam({ name: 'id', type: String })\n    async getNodesPatentID(@Res() res, @Param('id', new ValidateObjectId()) id) {\n      const nodes = await this.universitiesService.getNodes(id);\n      if (!nodes) {\n        throw new NotFoundException('nodes does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(nodes);\n    }\n\n    /**\n     * Submit a node\n     * @param res \n     * @param createNodeDTO \n     */\n    @Post('/add') \n    async addNode(@Res() res, @Body() createNodeDTO: CreateNodeDTO) { \n      const newNode = await this.universitiesService.addNode(createNodeDTO);\n      if (!newNode) {\n        throw new NotFoundException('newNode does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'Node has been submitted successfully!',\n        node: newNode,\n      });\n    }   \n\n    /**\n     * Edit a node\n     * @param res \n     * @param id \n     * @param createNodeDTO \n     */\n    @Put('/edit')\n    @ApiQuery({ name: 'id', type: String }) \n    async editNode(\n      @Res() res,\n      @Query('id', new ValidateObjectId()) id,\n      @Body() createNodeDTO: CreateNodeDTO,\n    ) {\n      if (id != createNodeDTO._id) {\n        throw new NotFoundException('Incorrect node id');\n      }\n      const editedNode= await this.universitiesService.editNode(id, createNodeDTO);\n      if (!editedNode) {\n          throw new NotFoundException('Node does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'Node has been successfully updated',\n        node: editedNode,\n      });\n    }\n    \n    /**\n     * Delete a node using id\n     * @param res \n     * @param id \n     */\n    @Delete('/delete')\n    @ApiQuery({ name: 'id', type: String })\n    async deleteNode(@Res() res, @Query('id', new ValidateObjectId()) id) {\n      const deletedNode = await this.universitiesService.deleteNode(id);\n      if (!deletedNode) {\n          throw new NotFoundException('Node does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'Node has been deleted!',\n        node: deletedNode,\n      });\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UniversitiesModule.html":{"url":"modules/UniversitiesModule.html","title":"module - UniversitiesModule","body":"\n                   \n\n\n\n\n    Modules\n    UniversitiesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UniversitiesModule\n\n\n\ncluster_UniversitiesModule_imports\n\n\n\ncluster_UniversitiesModule_exports\n\n\n\ncluster_UniversitiesModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nUniversitiesModule\n\nUniversitiesModule\n\nUniversitiesModule -->\n\nUsersModule->UniversitiesModule\n\n\n\n\n\nUniversitiesService \n\nUniversitiesService \n\nUniversitiesService  -->\n\nUniversitiesModule->UniversitiesService \n\n\n\n\n\nUniversitiesService\n\nUniversitiesService\n\nUniversitiesModule -->\n\nUniversitiesService->UniversitiesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/universities/universities.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UniversitiesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UniversitiesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UniversitiesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UniversitiesController } from './universities.controller';\nimport { UniversitiesService } from './universities.service';\nimport { NodeSchema } from './schemas/node.schema';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport {UsersModule} from '../users/users.module';\n\n@Module({\n  imports: [  \n    MongooseModule.forFeature([{ name: 'Node', schema: NodeSchema }]),\n    UsersModule],\n  controllers: [UniversitiesController],\n  providers: [UniversitiesService],\n  exports: [UniversitiesService]\n})\nexport class UniversitiesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UniversitiesService.html":{"url":"injectables/UniversitiesService.html","title":"injectable - UniversitiesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UniversitiesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/universities/universities.service.ts\n        \n\n            \n                Description\n            \n            \n                Universities Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addNode\n                            \n                            \n                                    Async\n                                deleteNode\n                            \n                            \n                                    Async\n                                editNode\n                            \n                            \n                                getDepartments\n                            \n                            \n                                getInstitutions\n                            \n                            \n                                    Async\n                                getNode\n                            \n                            \n                                    Async\n                                getNodes\n                            \n                            \n                                getTeachers\n                            \n                            \n                                    Async\n                                getTree\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addNode(createNodeDTO: CreateNodeDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:126\n                \n            \n\n\n            \n                \n                    Add new Node\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createNodeDTO\n                                    \n                                                CreateNodeDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteNode(id)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:147\n                \n            \n\n\n            \n                \n                    Delete Node by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editNode(id: any, createNodeDTO: CreateNodeDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:137\n                \n            \n\n\n            \n                \n                    Edit Node by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createNodeDTO\n                                    \n                                                CreateNodeDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDepartments\n                        \n                        \n                    \n                \n            \n            \n                \ngetDepartments(id, allNodes, allUsers)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:88\n                \n            \n\n\n            \n                \n                    get Departments\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Institute id\n\n                                    \n                                \n                                \n                                    allNodes\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all nodes\n\n                                    \n                                \n                                \n                                    allUsers\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all nodes\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getInstitutions\n                        \n                        \n                    \n                \n            \n            \n                \ngetInstitutions(id, allNodes, allUsers)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:70\n                \n            \n\n\n            \n                \n                    get Institutions\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        universiry id\n\n                                    \n                                \n                                \n                                    allNodes\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all nodes\n\n                                    \n                                \n                                \n                                    allUsers\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        all users\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNode\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNode(id)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:38\n                \n            \n\n\n            \n                \n                    Get Node by id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getNodes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getNodes(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:27\n                \n            \n\n\n            \n                \n                    Get Nodes by parentNode id\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTeachers\n                        \n                        \n                    \n                \n            \n            \n                \ngetTeachers(teachers, allUsers)\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:105\n                \n            \n\n\n            \n                \n                    get Teachers\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    teachers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    allUsers\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTree\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTree()\n                \n            \n\n\n            \n                \n                    Defined in src/universities/universities.service.ts:48\n                \n            \n\n\n            \n                \n                    Get all tree of all nodes\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Node } from './interfaces/node.interface';\nimport { ObjectId } from 'mongodb';\nimport { CreateNodeDTO } from './dto/create-node.dto';\n \nimport { connectableObservableDescriptor } from 'rxjs/internal/observable/ConnectableObservable';\nimport { UsersService } from 'src/users/users.service';\n\n/**\n * Universities Service\n */\n@Injectable()\nexport class UniversitiesService {\n \n    /**\n     * @ignore\n     * @param nodeModel \n     */\n    constructor( @InjectModel('Node') private readonly nodeModel: Model, private usersService: UsersService ) { }\n    \n    /**\n     * Get Nodes by parentNode id\n     * @param id \n     */\n    async getNodes(id: string) : Promise {\n        const nodes = await this.nodeModel\n            .find({\"parentNode\" : id})\n            .exec();\n        return nodes;\n    }\n\n    /**\n     * Get Node by id\n     * @param id \n     */\n    async getNode(id): Promise { \n        const node = await this.nodeModel\n            .findOne({\"_id\": id})\n            .exec(); \n        return node;\n    }\n\n    /**\n     * Get all tree of all nodes\n     */\n    async getTree() : Promise {\n        var allUsers = await this.usersService.getUsers();\n        var allNodes = await this.nodeModel\n            .find({}) \n            .exec();\n        var nodes = allNodes.filter(x=>x.parentNode ==\"\");\n        var tree =[];\n        nodes.map(element => \n               tree.push( {\n                \"id\" : element._id,\n                \"name\" : element.nodeName,  \n                \"institutions\" : this.getInstitutions(element._id,allNodes,allUsers)                    \n            }));\n        return tree\n    }\n\n    /**\n     * get Institutions\n     * @param id universiry id\n     * @param allNodes all nodes\n     * @param allUsers all users\n     */\n    getInstitutions(id, allNodes,allUsers) {\n        var nodes = allNodes.filter(x=>x.parentNode == id);\n        var tree =[];\n        (nodes).map(node=>{\n            tree.push( {\n                \"id\" : node._id,\n                \"name\" : node.nodeName,\n                \"departments\": this.getDepartments(node[\"id\"], allNodes, allUsers)                              \n            })});      \n        return tree;\n    }\n  \n    /**\n     * get Departments\n     * @param id Institute id\n     * @param allNodes all nodes\n     * @param allUsers all nodes\n     */\n    getDepartments(id, allNodes, allUsers) {\n        var nodes = allNodes.filter(x=>x.parentNode == id);\n        var tree =[];\n        (nodes).map(node=>{\n            tree.push( {\n                \"id\" : node._id,\n                \"name\" : node.nodeName ,\n                \"teachers\" : this.getTeachers(node.teachers, allUsers)                     \n            })});  \n        return tree;\n    }\n  \n    /**\n     * get Teachers\n     * @param teachers \n     * @param allUsers \n     */\n    getTeachers(teachers, allUsers) {\n        if(teachers.length == 0 )\n            return [];\n        var tree =[];\n        (teachers).map(teacher=>{      \n            var user = allUsers.filter(x=>x._id == teacher)[0];\n            if(user){\n              tree.push( {\n                  \"id\" : teacher,\n                  \"name\" : user.lastName + \" \" + user.firstName,\n                  \"email\" : user.email\n              })}          \n          }); \n        return tree;\n    }\n\n\n    /**\n     * Add new Node\n     * @param createNodeDTO \n     */\n    async addNode(createNodeDTO: CreateNodeDTO): Promise {\n        createNodeDTO._id = new ObjectId();\n        const newNode = await new this.nodeModel(createNodeDTO);\n        return newNode.save();\n    }\n\n    /**\n     * Edit Node by id\n     * @param id \n     * @param createNodeDTO \n     */\n    async editNode(id: any, createNodeDTO: CreateNodeDTO) : Promise {\n        const editedNode = await this.nodeModel\n            .findByIdAndUpdate(id, createNodeDTO, { new: true });\n        return editedNode;\n    }\n\n    /**\n     * Delete Node by id\n     * @param id \n     */\n    async deleteNode(id): Promise {\n        const deletedNode = await this.nodeModel\n            .findByIdAndRemove(id);\n        return deletedNode;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/interfaces/user.interface.ts\n        \n\n            \n                Description\n            \n            \n                User mongoose Document\n\n            \n\n            \n                Extends\n            \n            \n                    Document\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        _id\n                                \n                                \n                                        contactPhone\n                                \n                                \n                                        email\n                                \n                                \n                                        firstName\n                                \n                                \n                                        interests\n                                \n                                \n                                        lastName\n                                \n                                \n                                        password\n                                \n                                \n                                        role\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _id\n                                    \n                                \n                                \n                                    \n                                        _id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User id\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        contactPhone\n                                    \n                                \n                                \n                                    \n                                        contactPhone:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User contactPhone\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User email\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User firstName\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interests\n                                    \n                                \n                                \n                                    \n                                        interests:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User interests\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User lastName\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User password\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        role\n                                    \n                                \n                                \n                                    \n                                        role:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User role\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    User title\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Document } from 'mongoose';\n\n/**\n * User mongoose Document\n */\nexport interface User extends Document {\n    /**\n     * User id\n     */\n    readonly _id: string;\n    /**\n     * User firstName\n     */\n    readonly firstName: string;\n    /**\n     * User lastName\n     */\n    readonly lastName: string;\n    /**\n     * User email\n     */\n    readonly email: string;\n    /**\n     * User password\n     */\n    readonly password: string;\n    /**\n     * User contactPhone\n     */\n    readonly contactPhone: string;\n    /**\n     * User title\n     */\n    readonly title: string;\n    /**\n     * User interests\n     */\n    readonly interests: string;\n    /**\n     * User role\n     */\n    readonly role: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserLoginDTO.html":{"url":"classes/UserLoginDTO.html","title":"class - UserLoginDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserLoginDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/userilogin.dto.ts\n        \n\n            \n                Description\n            \n            \n                UserLoginDTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: 'admin'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/userilogin.dto.ts:20\n                            \n                        \n\n                \n                    \n                        User password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()@ApiProperty({example: 'admin@admin.com'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/userilogin.dto.ts:13\n                            \n                        \n\n                \n                    \n                        User email\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmail, IsNotEmpty } from 'class-validator';\n \n/**\n * UserLoginDTO\n */\nexport class UserLoginDTO {\n    /**\n     * User email\n     */\n    @IsEmail()\n    @ApiProperty({example:'admin@admin.com'})\n    username: string;\n\n    /**\n     * User password\n     */\n    @IsNotEmpty()\n    @ApiProperty({example:'admin'})\n    password: string;\n  }\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n            \n                Description\n            \n            \n                Users Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addUser(res, createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/add')@ApiForbiddenResponse({description: 'User with this email already exists'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:62\n                \n            \n\n\n            \n                \n                    Submit a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(res, userID)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')@ApiNotFoundResponse({description: 'User does not exist!'})@ApiQuery({name: 'userID', type: String})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:110\n                \n            \n\n\n            \n                \n                    Delete a user using ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userID\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(res, userID, createUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/edit')@ApiQuery({name: 'userID', type: String})@ApiForbiddenResponse({description: 'User with this new email already exists'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:80\n                \n            \n\n\n            \n                \n                    Edit a user\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userID\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(res, userID)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':userID')@ApiOkResponse({description: 'The user has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})@ApiNotFoundResponse({description: 'User does not exist.'})@ApiBadRequestResponse({description: 'Invalid ID!'})@ApiParam({name: 'userID', type: String})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:47\n                \n            \n\n\n            \n                \n                    Fetch a particular user using ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userID\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(res)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/users')@ApiOkResponse({description: 'The users list has been successfully returned.'})@ApiForbiddenResponse({description: 'Forbidden.'})\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:31\n                \n            \n\n\n            \n                \n                    Fetch all users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Res, HttpStatus, Param, NotFoundException, Post, Body, Put, Query, Delete ,UseGuards, ForbiddenException} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { CreateUserDTO } from './dto/create-user.dto';\nimport { ValidateObjectId } from '../pipes/validate-object-id.pipes';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport { ApiTags, ApiOkResponse, ApiForbiddenResponse, ApiBearerAuth, ApiParam, ApiQuery, ApiNotFoundResponse, ApiBadRequestResponse, ApiUnauthorizedResponse } from '@nestjs/swagger';\nimport { ObjectID } from 'mongodb';\n\n/**\n * Users Controller\n */\n@UseGuards(JwtAuthGuard)\n@Controller('users')\n@ApiTags('Users')\n@ApiBearerAuth()\n@ApiUnauthorizedResponse({description:'Access Token is not valid or has expired'})\nexport class UsersController{\n  /**\n   * @ignore\n   * @param usersService \n   */\n    constructor(private usersService: UsersService) { }  \n    \n    /**\n     * Fetch all users\n     * @param res \n     */\n    @Get('/users')\n    @ApiOkResponse({description:'The users list has been successfully returned.'})\n    @ApiForbiddenResponse({description:'Forbidden.'})\n    async getUsers(@Res() res) {\n      const users = await this.usersService.getUsers();\n      return res.status(HttpStatus.OK).json(users);\n    }\n    \n    /**\n     * Fetch a particular user using ID\n     * @param res \n     * @param userID \n     */\n    @Get(':userID')\n    @ApiOkResponse({ description:'The user has been successfully returned.'})\n    @ApiForbiddenResponse({description:'Forbidden.'})\n    @ApiNotFoundResponse({description:'User does not exist.'})\n    @ApiBadRequestResponse({description:'Invalid ID!'})\n    @ApiParam({ name: 'userID', type: String })\n    async getUser(@Res() res, @Param('userID', new ValidateObjectId()) userID) {\n      const user = await this.usersService.getUser(new ObjectID(userID));\n      if (!user) {\n          throw new NotFoundException('User does not exist!');\n      }\n      return res.status(HttpStatus.OK).json(user);\n    }\n    \n    /**\n     * Submit a user\n     * @param res \n     * @param createUserDTO \n     */\n    @Post('/add')\n    @ApiForbiddenResponse({description:'User with this email already exists'})\n    async addUser(@Res() res, @Body() createUserDTO: CreateUserDTO) {\n      await this.usersService.checkEmail(createUserDTO.email); \n      const newUser = await this.usersService.addUser(createUserDTO);\n      return res.status(HttpStatus.OK).json({\n        message: 'User has been submitted successfully!',\n        user: newUser,\n      });\n    }   \n\n    /**\n     * Edit a user\n     * @param res \n     * @param userID \n     * @param createUserDTO \n     */\n    @Put('/edit')\n    @ApiQuery({ name: 'userID', type: String })\n    @ApiForbiddenResponse({description:'User with this new email already exists'})\n    async editUser(\n      @Res() res,\n      @Query('userID', new ValidateObjectId()) userID,\n      @Body() createUserDTO: CreateUserDTO,\n    ) {\n      if (userID != createUserDTO._id) {\n        throw new NotFoundException('Incorrect user ID');\n      }\n      const user = await this.usersService.getUser(new ObjectID(userID));\n      if (user && user.email !=  createUserDTO.email) {\n        await this.usersService.checkEmail(createUserDTO.email);\n      }\n      const editedUser = await this.usersService.editUser(userID, createUserDTO);\n      if (!editedUser) {\n          throw new NotFoundException('User does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'User has been successfully updated',\n        user: editedUser,\n      });\n    }\n    \n    /**\n     * Delete a user using ID\n     * @param res \n     * @param userID \n     */\n    @Delete('/delete')\n    @ApiNotFoundResponse({description:'User does not exist!'})\n    @ApiQuery({ name: 'userID', type: String })\n    async deleteUser(@Res() res, @Query('userID', new ValidateObjectId()) userID) {\n      const deletedUser = await this.usersService.deleteUser(userID);\n      if (!deletedUser) {\n          throw new NotFoundException('User does not exist!');\n      }\n      return res.status(HttpStatus.OK).json({\n        message: 'User has been deleted!',\n        user: deletedUser,\n      });\n    }\n  }\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { UserSchema } from './schemas/user.schema';\n\n@Module({\n  imports: [  \n    MongooseModule.forFeature([{ name: 'User', schema: UserSchema }]),],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n            \n                Description\n            \n            \n                Users Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUser\n                            \n                            \n                                    Async\n                                checkEmail\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                getUserSinc\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addUser(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n                    Add user to users table\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new user DTO\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:87\n                \n            \n\n\n            \n                \n                    Checking an address for its existence in the users table\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email address\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: any)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:77\n                \n            \n\n\n            \n                \n                    Delete user from users table\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(id: any, createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:67\n                \n            \n\n\n            \n                \n                    Edit user data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User id\n\n                                    \n                                \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new user DTO\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:47\n                \n            \n\n\n            \n                \n                    Find user by email\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        user email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(userID)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:29\n                \n            \n\n\n            \n                \n                    Get user by ID\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:20\n                \n            \n\n\n            \n                \n                    Get all users\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getUserSinc\n                        \n                        \n                    \n                \n            \n            \n                \ngetUserSinc(userID)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userID\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, ForbiddenException } from '@nestjs/common';\nimport { Model } from 'mongoose';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User } from './interfaces/user.interface';\nimport { CreateUserDTO } from './dto/create-user.dto';\nimport { ObjectId } from 'mongodb';\n\n/**\n * Users Service\n */\n@Injectable()\nexport class UsersService {\n  \n  /** @ignore */\n  constructor(@InjectModel('User') private readonly userModel: Model) { }\n\n  /**\n   * Get all users\n   */\n  async getUsers(): Promise {\n    const users = await this.userModel.find().exec();\n    return users;\n  }\n\n  /**\n   * Get user by ID\n   * @param {ObjectId} userID \n   */\n  async getUser(userID): Promise { \n    const user = await this.userModel\n      .findOne({\"_id\":userID})\n      .exec(); \n    return user;\n  }\n\n  getUserSinc(userID): Promise { \n    const user =  this.userModel\n      .findOne({\"_id\":userID})\n      .exec(); \n    return user;\n  }\n\n  /**\n   * Find user by email\n   * @param {string} email user email\n   */\n  async findUserByEmail(email: string): Promise { \n    const user = await this.userModel.findOne({\"email\" : email}).exec(); \n    return user;\n  }\n\n  /**\n   * Add user to users table\n   * @param createUserDTO new user DTO\n   */\n  async addUser(createUserDTO: CreateUserDTO): Promise {\n    createUserDTO._id = new ObjectId();\n    const newUser = await new this.userModel(createUserDTO);\n    return newUser.save();\n  }\n  \n  /**\n   * Edit user data\n   * @param id User id\n   * @param createUserDTO new user DTO\n   */\n  async editUser(id: any, createUserDTO: CreateUserDTO): Promise {\n    const editedUser = await this.userModel\n      .findByIdAndUpdate(id, createUserDTO, { new: true });\n    return editedUser;\n  }\n  \n  /**\n   * Delete user from users table\n   * @param id User id\n   */\n  async deleteUser(id: any): Promise {\n    const deletedUser = await this.userModel\n      .findByIdAndRemove(id);\n    return deletedUser;\n  }\n\n  /**\n   * Checking an address for its existence in the users table\n   * @param email email address\n   */\n  async checkEmail(email: string) {\n    const user = await this.findUserByEmail(email);\n    if (user) {\n      throw new ForbiddenException('User with this email already exists');\n    }\n  }\n}  \n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidateObjectId.html":{"url":"injectables/ValidateObjectId.html","title":"injectable - ValidateObjectId","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidateObjectId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/pipes/validate-object-id.pipes.ts\n        \n\n            \n                Description\n            \n            \n                Validate mongoose ObjectId\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: string, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/pipes/validate-object-id.pipes.ts:14\n                \n            \n\n\n            \n                \n                    Get isValid ObjectId\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PipeTransform, Injectable, ArgumentMetadata, BadRequestException } from '@nestjs/common';\nimport * as mongoose from 'mongoose';\n\n/**\n * Validate mongoose ObjectId\n */\n@Injectable()\nexport class ValidateObjectId implements PipeTransform {\n  /**\n   * Get isValid ObjectId\n   * @param value \n   * @param metadata \n   */\n  async transform(value: string, metadata: ArgumentMetadata) {\n    const isValid = mongoose.Types.ObjectId.isValid(value);\n    if (!isValid) {\n        throw new BadRequestException('Invalid ID!');\n    }\n    return value;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controler.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            url\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/courses/courses.controller.ts\n            \n            controller\n            CoursesController\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/courses/courses.service.ts\n            \n            injectable\n            CoursesService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/courses/dto/create-course.dto.ts\n            \n            class\n            CreateCourseDTO\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/courses/interfaces/course.interface.ts\n            \n            interface\n            Course\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/courses/schemas/course.schema.ts\n            \n            variable\n            CourseSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/pipes/validate-object-id.pipes.ts\n            \n            injectable\n            ValidateObjectId\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/universities/dto/create-node.dto.ts\n            \n            class\n            CreateNodeDTO\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/universities/interfaces/node.interface.ts\n            \n            interface\n            Node\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/universities/schemas/node.schema.ts\n            \n            variable\n            NodeSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/universities/universities.controller.ts\n            \n            controller\n            UniversitiesController\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/universities/universities.service.ts\n            \n            injectable\n            UniversitiesService\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/users/dto/userilogin.dto.ts\n            \n            class\n            UserLoginDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/interfaces/user.interface.ts\n            \n            interface\n            User\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/users/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                88 %\n                (8/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cli : ^7.0.0\n        \n            ts-node : ^8.6.2\n        \n            @types/node : ^13.9.1\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.1.0\n        \n            @nestjs/mongoose : ^7.0.2\n        \n            @nestjs/passport : ^7.1.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.12\n        \n            @nestjsx/crud : ^4.6.2\n        \n            @types/mongoose : ^5.7.36\n        \n            bcrypt : ^5.0.0\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.12.2\n        \n            dotenv : ^8.2.0\n        \n            fastify-swagger : ^3.3.0\n        \n            migrate-mongoose : ^4.0.0\n        \n            mongodb : ^3.5.9\n        \n            mongoose : ^5.10.0\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.25\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Bootstrap\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodDatabase migrations\n# run all unapplied database migrations\n$ migrate-mongo up\n\n# undo the last applied database migration\n$ migrate-mongo down\n\n# print the changelog of the database\n$ migrate-mongo statusTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covAPI documentation\nhttp://localhost:3001/api/  \nBackend documentation\n# Compodoc documentation\n$ npm run compodocSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoursesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UniversitiesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CoursesModule\n\n\n\ncluster_CoursesModule_exports\n\n\n\ncluster_CoursesModule_providers\n\n\n\ncluster_UniversitiesModule\n\n\n\ncluster_UniversitiesModule_exports\n\n\n\ncluster_UniversitiesModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCoursesModule\n\nCoursesModule\n\nAppModule -->\n\nCoursesModule->AppModule\n\n\n\n\n\nCoursesService \n\nCoursesService \n\nCoursesService  -->\n\nCoursesModule->CoursesService \n\n\n\n\n\nUniversitiesModule\n\nUniversitiesModule\n\nAppModule -->\n\nUniversitiesModule->AppModule\n\n\n\n\n\nUniversitiesService \n\nUniversitiesService \n\nUniversitiesService  -->\n\nUniversitiesModule->UniversitiesService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nUniversitiesModule -->\n\nUsersModule->UniversitiesModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCoursesService\n\nCoursesService\n\nCoursesModule -->\n\nCoursesService->CoursesModule\n\n\n\n\n\nUniversitiesService\n\nUniversitiesService\n\nUniversitiesModule -->\n\nUniversitiesService->UniversitiesModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CourseSchema   (src/.../course.schema.ts)\n                        \n                        \n                            NodeSchema   (src/.../node.schema.ts)\n                        \n                        \n                            url   (src/.../app.module.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/courses/schemas/course.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CourseSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _id: String,\n    courseName: String,\n    parentDepartment: String,\n    hoursNumber: Number,\n    lecturesNumber: Number,\n    seminarsNumber: Number,\n    practicesNumber: Number,\n    laboratoryWorksNumber: Number,\n    selfEducationHours: Number,\n    controlWorksNumber: Number,\n    consultationsNumber: Number,\n    students: Array,\n    createdDate: Date,\n    createdDUser: String \n})\n                        \n                    \n\n                \n                    \n                        Course mongoose Schema\n\n                    \n                \n\n            \n        \n\n    src/universities/schemas/node.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            NodeSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _id: String,\n    nodeName: String,\n    parentNode: String,\n    teachers: Array,\n    mentors: Array,\n    createdDate: Date,\n    createdDUser: String,\n})\n                        \n                    \n\n                \n                    \n                        Node mongoose Schema\n\n                    \n                \n\n            \n        \n\n    src/app.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.DB_URI || \"mongodb+srv://alex:admin@cluster0.jczgn.mongodb.net/edu4u?retryWrites=true&w=majority\"\n                        \n                    \n\n                \n                    \n                        DataBase url\n\n                    \n                \n\n            \n        \n\n    src/users/schemas/user.schema.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new mongoose.Schema({\n    _id: String,\n    firstName: String,\n    lastName: String,\n    email: String,\n    password: String,\n    contactPhone: String,\n    title: String,\n    interests: String,\n    role: String,\n})\n                        \n                    \n\n                \n                    \n                        User mongoose Schema\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
